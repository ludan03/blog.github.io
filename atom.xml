<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>白 日 淡</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ludan03.github.io/"/>
  <updated>2019-01-20T10:24:02.566Z</updated>
  <id>http://ludan03.github.io/</id>
  
  <author>
    <name>Ludan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java编码规范</title>
    <link href="http://ludan03.github.io/2019/01/19/coding_rules.html"/>
    <id>http://ludan03.github.io/2019/01/19/coding_rules.html</id>
    <published>2019-01-19T10:22:11.000Z</published>
    <updated>2019-01-20T10:24:02.566Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-编程规约"><a href="#一-编程规约" class="headerlink" title="一.编程规约"></a>一.编程规约</h1><h2 id="（一）命名风格"><a href="#（一）命名风格" class="headerlink" title="（一）命名风格"></a>（一）命名风格</h2><ol><li><p>【强制】代码中的命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束。<br><br>反例:<em>name / __name / $name / name</em> / name$ / name__</p></li><li><p>【强制】代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。 说明:正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式 也要避免采用。<br><br>正例:alibaba / taobao / youku / hangzhou 等国际通用的名称，可视同英文。<br><br>反例:DaZhePromotion [打折] / getPingfenByName() [评分] / int 某变量 = 3</p></li><li><p>【强制】类名使用 UpperCamelCase 风格，但以下情形例外:DO / BO / DTO / VO / AO / PO / UID等<br><br>正例:MarcoPolo / UserDO / XmlService / TcpUdpDeal / TaPromotion<br><br>反例:macroPolo / UserDo / XMLService / TCPUDPDeal / TAPromotion</p></li><li><p>【强制】方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从 驼峰形式。<br><br>正例: localValue / getHttpMessage() / inputUserId</p></li><li><p>【强制】常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。 <br>正例:MAX_STOCK_COUNT<br><br>反例:MAX_COUNT</p></li><li><p>【强制】抽象类命名使用 Abstract 或 Base 开头;异常类命名使用 Exception 结尾;测试类 命名以它要测试的类的名称开始，以 Test 结尾。</p></li><li><p>【强制】类型与中括号紧挨相连来表示数组。<br><br>正例:定义整形数组 int[] arrayDemo;<br><br>反例:在 main 参数中，使用 String args[]来定义。</p></li><li><p>【强制】POJO 类中布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误。<br><br>反例:定义为基本数据类型Boolean isDeleted的属性，它的方法也是isDeleted()，RPC框架在反向解析的时候，“误以为”对应的属性名称是 deleted，导致属性获取不到，进而抛<br>出异常。</p></li><li><p>【强制】包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用 单数形式，但是类名如果有复数含义，类名可以使用复数形式。<br><br>正例:应用工具类包名为 com.alibaba.ai.util、类名为 MessageUtils(此规则参考 spring 的框架结构)</p></li><li><p>【强制】杜绝完全不规范的缩写，避免望文不知义。<br><br>反例:AbstractClass“缩写”命名成 AbsClass;condition“缩写”命名成 condi，此类随 意缩写严重降低了代码的可阅读性。</p></li><li><p>【推荐】为了达到代码自解释的目标，任何自定义编程元素在命名时，使用尽量完整的单词 组合来表达其意。<br><br>正例:在 JDK 中，表达原子更新的类名为:AtomicReferenceFieldUpdater。<br><br>反例:变量 int a 的随意命名方式。</p></li><li><p>【推荐】如果模块、接口、类、方法使用了设计模式，在命名时需体现出具体模式。 说明:将设计模式体现在名字中，有利于阅读者快速理解架构设计理念。<br><br>正例:public class OrderFactory;<br><br>public class LoginProxy;<br><br>public class ResourceObserver;</p></li><li><p>【推荐】接口类中的方法和属性不要加任何修饰符号(public 也不要加)，保持代码的简洁 性，并加上有效的 Javadoc 注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是 与接口方法相关，并且是整个应用的基础常量。<br><br>正例:接口方法签名void commit();<br><br>接口基础常量String COMPANY = “alibaba”;<br><br>反例:接口方法定义public abstract void f();<br><br>说明:JDK8 中接口允许有默认实现，那么这个 default 方法，是对所有实现类都有价值的默 认实现。</p></li><li><p>接口和实现类的命名有两套规则:</p><ol><li>【强制】对于 Service 和 DAO 类，基于 SOA 的理念，暴露出来的服务一定是接口，内部的实现类用 Impl 的后缀与接口区别。 正例:CacheServiceImpl 实现 CacheService 接口。</li><li>【推荐】 如果是形容能力的接口名称，取对应的形容词为接口名(通常是–able 的形式)。 正例:AbstractTranslator 实现 Translatable 接口。</li></ol></li></ol><ol start="15"><li><p>【参考】枚举类名建议带上 Enum 后缀，枚举成员名称需要全大写，单词间用下划线隔开。<br><br>说明:枚举其实就是特殊的类，域成员均为常量，且构造方法被默认强制是私有。<br><br>正例:枚举名字为ProcessStatusEnum的成员名称:SUCCESS / UNKNOWN_REASON。</p></li><li><p>【参考】各层命名规约:<br><br> A)Service/DAO层方法命名规约</p><ol><li>获取单个对象的方法用get做前缀。</li><li>获取多个对象的方法用list做前缀，复数形式结尾如:listObjects。</li><li>获取统计值的方法用count做前缀。</li><li>插入的方法用save/insert做前缀。</li><li>删除的方法用remove/delete做前缀。</li><li>修改的方法用update做前缀。</li></ol><p>B) 领域模型命名规约</p><ol><li>数据对象:xxxDO，xxx即为数据表名。</li><li>数据传输对象:xxxDTO，xxx为业务领域相关的名称。</li><li>展示对象:xxxVO，xxx一般为网页名称。</li><li>POJO是DO/DTO/BO/VO的统称，禁止命名成xxxPOJO。</li></ol></li></ol><h2 id="二-常量定义"><a href="#二-常量定义" class="headerlink" title="(二) 常量定义"></a>(二) 常量定义</h2><ol><li><p>【强制】不允许任何魔法值(即未经预先定义的常量)直接出现在代码中。<br><br>反例:String key = “Id#taobao_” + tradeId;<br>cache.put(key, value);</p></li><li><p>【强制】在 long 或者 Long 赋值时，数值后使用大写的 L，不能是小写的 l，小写容易跟数字 1 混淆，造成误解。<br><br>说明:Long a = 2l; 写的是数字的21，还是Long型的2?</p></li><li><p>【推荐】不要使用一个常量类维护所有常量，要按常量功能进行归类，分开维护。<br><br>说明:大而全的常量类，杂乱无章，使用查找功能才能定位到修改的常量，不利于理解和维护。<br><br>正例:缓存相关常量放在类 CacheConsts 下;系统配置相关常量放在类 ConfigConsts 下。</p></li><li><p>【推荐】常量的复用层次有五层:跨应用共享常量、应用内共享常量、子工程内共享常量、包 内共享常量、类内共享常量。</p><ol><li>跨应用共享常量:放置在二方库中，通常是client.jar中的constant目录下。</li><li>应用内共享常量:放置在一方库中，通常是子模块中的constant目录下。<br><br>反例:易懂变量也要统一定义成应用内共享常量，两位攻城师在两个类中分别定义了表示 “是”的变量:<br><br>类A中:public static final String YES = “yes”;<br><br>类B中:public static final String YES = “y”;<br><br>A.YES.equals(B.YES)，预期是 true，但实际返回为 false，导致线上问题。</li><li>子工程内部共享常量:即在当前子工程的constant目录下。</li><li>包内共享常量:即在当前包下单独的constant目录下。</li><li>类内共享常量:直接在类内部private static final定义。</li></ol></li><li><p>【推荐】如果变量值仅在一个固定范围内变化用 enum 类型来定义。<br><br>说明:如果存在名称之外的延伸属性应使用 enum 类型，下面正例中的数字就是延伸信息，表示一年中的第几个季节。<br><br>正例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public enum SeasonEnum &#123;</span><br><span class="line">  SPRING(1), SUMMER(2), AUTUMN(3), WINTER(4);</span><br><span class="line">  private int seq;</span><br><span class="line">  SeasonEnum(int seq)&#123;</span><br><span class="line">     this.seq = seq;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="三-代码格式"><a href="#三-代码格式" class="headerlink" title="(三) 代码格式"></a>(三) 代码格式</h2><ol><li>【强制】大括号的使用约定。如果是大括号内为空，则简洁地写成{}即可，不需要换行;如果 是非空代码块则:<ol><li>左大括号前不换行。</li><li>左大括号后换行。</li><li>右大括号前换行。</li><li>右大括号后还有else等代码则不换行;表示终止的右大括号后必须换行。</li></ol></li></ol><ol start="2"><li><p>【强制】左小括号和字符之间不出现空格;同样，右小括号和字符之间也不出现空格;而左大 括号前需要空格。详见第 5 条下方正例提示。<br><br>反例:if (空格a == b空格)</p></li><li><p>【强制】if/for/while/switch/do 等保留字与括号之间都必须加空格。</p></li><li><p>【强制】任何二目、三目运算符的左右两边都需要加一个空格。<br><br>说明:运算符包括赋值运算符=、逻辑运算符&amp;&amp;、加减乘除符号等。</p></li><li><p>【强制】采用 4 个空格缩进，禁止使用 tab 字符。<br>说明:如果使用 tab 缩进，必须设置 1 个 tab 为 4 个空格。IDEA 设置 tab 为 4 个空格时， 请勿勾选<figure class="highlight plain"><figcaption><span>tab character```;而在 eclipse 中，必须勾选```insert spaces for tabs```。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;br/&gt;正例: (涉及1-5点)</span><br></pre></td></tr></table></figure></p></li></ol><p>public static void main(String[] args) {<br>        // 缩进 4 个空格<br>        String say = “hello”;<br>        // 运算符的左右必须有一个空格<br>        int flag = 0;<br>        // 关键词 if 与括号之间必须有一个空格，括号内的 f 与左括号，0 与右括号不需要空格<br>        if (flag == 0) {<br>           System.out.println(say);<br>        }<br>        // 左大括号前加空格且不换行;左大括号后换行<br>        if (flag == 1) {<br>           System.out.println(“world”);<br>        // 右大括号前换行，右大括号后有 else，不用换行<br>        } else {<br>           System.out.println(“ok”);<br>        // 在右大括号后直接结束，则必须换行<br>        }<br>    }<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">6. 【强制】注释的双斜线与注释内容之间有且仅有一个空格。</span><br><span class="line">正例:</span><br></pre></td></tr></table></figure></p><pre><code>// 这是示例注释，请注意在双斜线之后有一个空格String ygb = new String();</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">7. 【强制】单行字符数限制不超过 120 个，超出需要换行，换行时遵循如下原则:</span><br><span class="line">  1. 第二行相对第一行缩进 4 个空格，从第三行开始，不再继续缩进，参考示例。</span><br><span class="line">  2. 运算符与下文一起换行。</span><br><span class="line">  3. 方法调用的点符号与下文一起换行。</span><br><span class="line">  4. 方法调用中的多个参数需要换行时，在逗号后进行。</span><br><span class="line">  5. 在括号前不要换行，见反例。</span><br><span class="line"></span><br><span class="line">  正例:</span><br></pre></td></tr></table></figure><p>StringBuffer sb = new StringBuffer();<br>// 超过 120 个字符的情况下，换行缩进 4 个空格，点号和方法名称一起换行 sb.append(“zi”).append(“xin”)…<br>          .append(“huang”)…<br>          .append(“huang”)…<br>          .append(“huang”);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">反例:</span><br></pre></td></tr></table></figure></p><p>StringBuffer sb = new StringBuffer();<br>// 超过 120 个字符的情况下，不要在括号前换行 sb.append(“zi”).append(“xin”)…append<br>(“huang”);<br>// 参数很多的方法调用可能超过 120 个字符，不要在逗号前换行<br>method(args1, args2, args3, …<br>  , argsX);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">8. 【强制】方法参数在定义和传入时，多个参数逗号后边必须加空格。</span><br><span class="line">&lt;br/&gt;正例:下例中实参的 args1，后边必须要有一个空格。</span><br><span class="line">       method(args1, args2, args3);</span><br><span class="line"></span><br><span class="line">9. 【强制】IDE的text file encoding设置为UTF-8; IDE中文件的换行符使用Unix格式， 不要使用 Windows 格式。</span><br><span class="line"></span><br><span class="line">10. 【推荐】单个方法的总行数不超过 80 行。</span><br><span class="line">&lt;br/&gt;说明:包括方法签名、结束右大括号、方法内代码、注释、空行、回车及任何不可见字符的总 行数不超过 80 行。</span><br><span class="line">&lt;br/&gt;正例:代码逻辑分清红花和绿叶，个性和共性，绿叶逻辑单独出来成为额外方法，使主干代码 更加清晰;共性逻辑抽取成为共性方法，便于复用和维护。</span><br><span class="line"></span><br><span class="line">11. 【推荐】没有必要增加若干空格来使某一行的字符与上一行对应位置的字符对齐。</span><br><span class="line">正例:</span><br></pre></td></tr></table></figure></p><p>int one = 1;<br>long two = 2L;<br>float three = 3F;<br>StringBuffer sb = new StringBuffer();<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;br/&gt;说明:增加 sb 这个变量，如果需要对齐，则给 a、b、c 都要增加几个空格，在变量比较多的 情况下，是非常累赘的事情。</span><br><span class="line"></span><br><span class="line">12. 【推荐】不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以提升可读性。</span><br><span class="line">&lt;br/&gt;说明:任何情形，没有必要插入多个空行进行隔开。</span><br><span class="line"></span><br><span class="line">##  (四) OOP 规约</span><br><span class="line">1. 【强制】避免通过一个类的对象引用访问此类的静态变量或静态方法，无谓增加编译器解析成本，直接用类名来访问即可。</span><br><span class="line"></span><br><span class="line">2. 【强制】所有的覆写方法，必须加@Override 注解。</span><br><span class="line">&lt;br/&gt;说明:getObject()与 get0bject()的问题。一个是字母的 O，一个是数字的 0，加@Override 可以准确判断是否覆盖成功。另外，如果在抽象类中对方法签名进行修改，其实现类会马上编译报错。</span><br><span class="line"></span><br><span class="line">3. 【强制】相同参数类型，相同业务含义，才可以使用 Java 的可变参数，避免使用Object。 &lt;br/&gt;说明:可变参数必须放置在参数列表的最后。(提倡同学们尽量不用可变参数编程)</span><br><span class="line">&lt;br/&gt;正例:public List&lt;User&gt; listUsers(String type, Long... ids) &#123;...&#125;</span><br><span class="line"></span><br><span class="line">4. 【强制】外部正在调用或者二方库依赖的接口，不允许修改方法签名，避免对接口调用方产生影响。接口过时必须加@Deprecated 注解，并清晰地说明采用的新接口或者新服务是什么。</span><br><span class="line"></span><br><span class="line">5. 【强制】不能使用过时的类或方法。</span><br><span class="line">&lt;br/&gt;说明:java.net.URLDecoder 中的方法 decode(String encodeStr) 这个方法已经过时，应该使用双参数 decode(String source, String encode)。接口提供方既然明确是过时接口，那么有义务同时提供新的接口;作为调用方来说，有义务去考证过时方法的新实现是什么。</span><br><span class="line"></span><br><span class="line">6. 【强制】Object 的 equals 方法容易抛空指针异常，应使用常量或确定有值的对象来调用 equals。</span><br><span class="line">&lt;br/&gt;正例:&quot;test&quot;.equals(object);</span><br><span class="line">&lt;br/&gt;反例:object.equals(&quot;test&quot;);</span><br><span class="line">&lt;br/&gt;说明:推荐使用 java.util.Objects#equals(JDK7 引入的工具类)</span><br><span class="line"></span><br><span class="line">7. 【强制】所有的相同类型的包装类对象之间值的比较，全部使用 equals 方法比较。</span><br><span class="line">&lt;br/&gt;说明:对于 Integer var = ? 在-128 至 127 范围内的赋值，Integer 对象是在 IntegerCache.cache 产生，会复用已有对象，这个区间内的 Integer 值可以直接使用==进行 判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是一个大坑， 推荐使用 equals 方法进行判断。</span><br><span class="line"></span><br><span class="line">8. 关于基本数据类型与包装数据类型的使用标准如下:</span><br><span class="line">  1. 【强制】所有的POJO类属性必须使用包装数据类型。</span><br><span class="line">  2. 【强制】RPC方法的返回值和参数必须使用包装数据类型。</span><br><span class="line">  3. 【推荐】所有的局部变量使用基本数据类型。</span><br><span class="line"></span><br><span class="line">  &lt;br/&gt;说明:POJO 类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何</span><br><span class="line">NPE 问题，或者入库检查，都由使用者来保证。</span><br><span class="line">  &lt;br/&gt;正例:数据库的查询结果可能是 null，因为自动拆箱，用基本数据类型接收有 NPE 风险。</span><br><span class="line">  &lt;br/&gt;反例:比如显示成交总额涨跌情况，即正负 x%，x 为基本数据类型，调用的 RPC 服务，调用不成功时，返回的是默认值，页面显示为 0%，这是不合理的，应该显示成中划线。所以包装 数据类型的 null 值，能够表示额外的信息，如:远程调用失败，异常退出。</span><br><span class="line"></span><br><span class="line">9. 【强制】定义 DO/DTO/VO 等 POJO 类时，不要设定任何属性默认值。</span><br><span class="line">&lt;br/&gt;反例:POJO 类的 gmtCreate 默认值为 new Date()，但是这个属性在数据提取时并没有置入具体值，在更新其它字段时又附带更新了此字段，导致创建时间被修改成当前时间。</span><br><span class="line"></span><br><span class="line">10. 【强制】序列化类新增属性时，请不要修改 serialVersionUID 字段，避免反序列失败;如 果完全不兼容升级，避免反序列化混乱，那么请修改 serialVersionUID 值。</span><br><span class="line">&lt;br/&gt;说明:注意 serialVersionUID 不一致会抛出序列化运行时异常。</span><br><span class="line"></span><br><span class="line">11. 【强制】构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中。</span><br><span class="line"></span><br><span class="line">12. 【强制】POJO 类必须写 toString 方法。使用 IDE 中的工具:source&gt; generate toString 时，如果继承了另一个 POJO 类，注意在前面加一下 super.toString。 说明:在方法执行抛出异常时，可以直接调用 POJO 的 toString()方法打印其属性值，便于排查问题。</span><br><span class="line"></span><br><span class="line">13. 【强制】禁止在 POJO 类中，同时存在对应属性 xxx 的 isXxx()和 getXxx()方法。</span><br><span class="line">&lt;br/&gt;说明:框架在调用属性 xxx 的提取方法时，并不能确定哪个方法一定是被优先调用到。</span><br><span class="line"></span><br><span class="line">14. 【推荐】使用索引访问用 String 的 split 方法得到的数组时，需做最后一个分隔符后有无</span><br><span class="line">内容的检查，否则会有抛 IndexOutOfBoundsException 的风险。</span><br><span class="line">说明:</span><br></pre></td></tr></table></figure></p><p>String str = “a,b,c,,”;<br>String[] ary = str.split(“,”);<br>// 预期大于 3，结果是 3<br>System.out.println(ary.length);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">15. 【推荐】当一个类有多个构造方法，或者多个同名方法，这些方法应该按顺序放置在一起， 便于阅读，此条规则优先于第 16 条规则。</span><br><span class="line"></span><br><span class="line">16. 【推荐】 类内方法定义的顺序依次是:公有方法或保护方法 &gt; 私有方法 &gt; getter/setter 方法。</span><br><span class="line">&lt;br/&gt;说明:公有方法是类的调用者和维护者最关心的方法，首屏展示最好;保护方法虽然只是子类 关心，也可能是“模板设计模式”下的核心方法;而私有方法外部一般不需要特别关心，是一个 黑盒实现;因为承载的信息价值较低，所有 Service 和 DAO 的 getter/setter 方法放在类体 最后。</span><br><span class="line"></span><br><span class="line">17. 【推荐】setter 方法中，参数名称与类成员变量名称一致，this.成员名 = 参数名。在</span><br><span class="line">getter/setter 方法中，不要增加业务逻辑，增加排查问题的难度。</span><br><span class="line">&lt;br/&gt;反例:</span><br></pre></td></tr></table></figure></p><p>public Integer getData() {<br>      if (condition) {<br>          return this.data + 100;<br>      } else {<br>          return this.data - 100;<br>      }<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">18. 【推荐】循环体内，字符串的连接方式，使用 StringBuilder 的 append 方法进行扩展。 说明:下例中，反编译出的字节码文件显示每次循环都会 new 出一个 StringBuilder 对象， 然后进行 append 操作，最后通过 toString 方法返回 String 对象，造成内存资源浪费。</span><br><span class="line">&lt;br/&gt;反例:</span><br></pre></td></tr></table></figure></p><p>String str = “start”;<br>for (int i = 0; i &lt; 100; i++) {<br>      str = str + “hello”;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">19. 【推荐】final 可以声明类、成员变量、方法、以及本地变量，下列情况使用 final 关键字:</span><br><span class="line">  1. 不允许被继承的类，如:String 类。</span><br><span class="line">  2. 不允许修改引用的域对象。</span><br><span class="line">  3. 不允许被重写的方法，如:POJO 类的 setter 方法。</span><br><span class="line">  4. 不允许运行过程中重新赋值的局部变量。</span><br><span class="line">  5. 避免上下文重复使用一个变量，使用 final 描述可以强制重新定义一个变量，方便更好 地进行重构。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">20. 【推荐】慎用 Object 的 clone 方法来拷贝对象。</span><br><span class="line">&lt;br/&gt;说明:对象的 clone 方法默认是浅拷贝，若想实现深拷贝需要重写 clone 方法实现域对象的深度遍历式拷贝。</span><br><span class="line"></span><br><span class="line">21. 【推荐】类成员与方法访问控制从严:</span><br><span class="line">  1. 如果不允许外部直接通过new来创建对象，那么构造方法必须是private。</span><br><span class="line">  2. 工具类不允许有public或default构造方法。</span><br><span class="line">  3. 类非static成员变量并且与子类共享，必须是protected。</span><br><span class="line">  4. 类非static成员变量并且仅在本类使用，必须是private。</span><br><span class="line">  5. 类static成员变量如果仅在本类使用，必须是private。</span><br><span class="line">  6. 若是static成员变量，考虑是否为final。</span><br><span class="line">  7. 类成员方法只供类内部调用，必须是private。</span><br><span class="line">  8. 类成员方法只对继承类公开，那么限制为protected。</span><br><span class="line"></span><br><span class="line">  &lt;br/&gt;说明:任何类、方法、参数、变量，严控访问范围。过于宽泛的访问范围，不利于模块解耦。</span><br><span class="line">  &lt;br/&gt;思考:如果是一个 private 的方法，想删除就删除，可是一个 public 的 service 成员方法或 成员变量，删除一下，不得手心冒点汗吗?变量像自己的小孩，尽量在自己的视线内，变量作 用域太大，无限制的到处跑，那么你会担心的。</span><br><span class="line"></span><br><span class="line">##  (五) 集合处理</span><br><span class="line">1. 【强制】关于 hashCode 和 equals 的处理，遵循如下规则:</span><br><span class="line">  1. 只要重写equals，就必须重写hashCode。</span><br><span class="line">  2. 因为Set存储的是不重复的对象，依据hashCode和equals进行判断，所以Set存储的 对象必须重写这两个方法。</span><br><span class="line">  3. 如果自定义对象作为Map的键，那么必须重写hashCode和equals。</span><br><span class="line">&lt;br/&gt;说明:String 重写了 hashCode 和 equals 方法，所以我们可以非常愉快地使用 String 对象 作为 key 来使用。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2. 【强制】ArrayList的subList结果不可强转成ArrayList，否则会抛出ClassCastException 异常，即java.util.RandomAccessSubList cannot be cast to java.util.ArrayList。</span><br><span class="line">&lt;br/&gt;说明:subList 返回的是 ArrayList 的内部类 SubList，并不是 ArrayList 而是 ArrayList 的一个视图，对于 SubList 子列表的所有操作最终会反映到原列表上。</span><br><span class="line"></span><br><span class="line">3. 【强制】在 subList 场景中，高度注意对原集合元素的增加或删除，均会导致子列表的遍历、 增加、删除产生ConcurrentModificationException 异常。</span><br><span class="line"></span><br><span class="line">4. 【强制】使用集合转数组的方法，必须使用集合的toArray(T[] array)，传入的是类型完全</span><br><span class="line">一样的数组，大小就是 list.size()。</span><br><span class="line">&lt;br/&gt;说明:使用 toArray 带参方法，入参分配的数组空间不够大时，toArray 方法内部将重新分配内存空间，并返回新数组地址;如果数组元素个数大于实际所需，下标为[ list.size() ]</span><br><span class="line">的数组元素将被置为 null，其它数组元素保持原值，因此最好将方法入参数组大小定义与集</span><br><span class="line">合元素个数一致。</span><br><span class="line">&lt;br/&gt;正例:</span><br></pre></td></tr></table></figure></p><p>List<string> list = new ArrayList<string>(2);<br>list.add(“guan”);<br>list.add(“bao”);<br>String[] array = new String[list.size()];<br>array = list.toArray(array);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;br/&gt;反例:直接使用 toArray 无参方法存在问题，此方法返回值只能是 Object[]类，若强转其它 类型数组将出现 ClassCastException 错误。</span><br><span class="line"></span><br><span class="line">5. 【强制】使用工具类 Arrays.asList()把数组转换成集合时，不能使用其修改集合相关的方法，它的 add/remove/clear 方法会抛出 UnsupportedOperationException 异常。</span><br><span class="line">&lt;br/&gt;说明:asList 的返回对象是一个 Arrays 内部类，并没有实现集合的修改方法。Arrays.asList 体现的是适配器模式，只是转换接口，后台的数据仍是数组。</span><br></pre></td></tr></table></figure></string></string></p><p>String[] str = new String[] { “you”, “wu” };<br>List list = Arrays.asList(str);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;br/&gt;第一种情况:list.add(&quot;yangguanbao&quot;); 运行时异常。</span><br><span class="line">&lt;br/&gt;第二种情况:str[0] = &quot;gujin&quot;; 那么list.get(0)也会随之修改。</span><br><span class="line"></span><br><span class="line">6. 【强制】泛型通配符&lt;? extends T&gt;来接收返回的数据，此写法的泛型集合不能使用add方 法，而&lt;? super T&gt;不能使用get方法，作为接口调用赋值时易出错。 说明:扩展说一下PECS(Producer Extends Consumer Super)原则:第一、频繁往外读取内 容的，适合用&lt;? extends T&gt;。第二、经常往里插入的，适合用&lt;? super T&gt;。</span><br><span class="line"></span><br><span class="line">7. 【强制】不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素请使用 Iterator 方式，如果并发操作，需要对 Iterator 对象加锁。</span><br><span class="line">&lt;br/&gt;正例:</span><br></pre></td></tr></table></figure></p><p>List<string> list = new ArrayList&lt;&gt;();<br>list.add(“1”);<br>list.add(“2”);<br>Iterator<string> iterator = list.iterator();<br>while (iterator.hasNext()) {<br>      String item = iterator.next();<br>      if (删除元素的条件) {<br>          iterator.remove();<br>      }<br> }<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">反例:</span><br></pre></td></tr></table></figure></string></string></p><p>for (String item : list) {<br>       if (“1”.equals(item)) {<br>           list.remove(item);<br>       }<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">说明:以上代码的执行结果肯定会出乎大家的意料，那么试一下把“1”换成“2”，会是同样的</span><br><span class="line">结果吗?</span><br><span class="line"></span><br><span class="line">8. 【强制】 在 JDK7 版本及以上，Comparator 实现类要满足如下三个条件，不然 Arrays.sort， Collections.sort 会报 IllegalArgumentException 异常。</span><br><span class="line">&lt;br/&gt;说明:三个条件如下</span><br><span class="line">  1. x，y的比较结果和y，x的比较结果相反。</span><br><span class="line">  2. x&gt;y，y&gt;z，则x&gt;z。</span><br><span class="line">  3. x=y，则x，z比较结果和y，z比较结果相同。</span><br><span class="line"></span><br><span class="line">  &lt;br/&gt;反例:下例中没有处理相等的情况，实际使用中可能会出现异常:</span><br></pre></td></tr></table></figure></p><p>new Comparator<student>() {<br>        @Override<br>        public int compare(Student o1, Student o2) {<br>            return o1.getId() &gt; o2.getId() ? 1 : -1;<br>        }<br>};<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">9.  【推荐】集合泛型定义时，在 JDK7 及以上，使用 diamond 语法或全省略。</span><br><span class="line">&lt;br/&gt;说明:菱形泛型，即 diamond，直接使用&lt;&gt;来指代前边已经指定的类型。</span><br><span class="line">&lt;br/&gt;正例:</span><br></pre></td></tr></table></figure></student></p><p>// &lt;&gt; diamond 方式<br>HashMap&lt;String, String&gt; userCache = new HashMap&lt;&gt;(16);<br>// 全省略方式<br>ArrayList<user> users = new ArrayList(10);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">10. 【推荐】集合初始化时，指定集合初始值大小。</span><br><span class="line">&lt;br/&gt;说明:HashMap使用HashMap(int initialCapacity) 初始化。</span><br><span class="line">&lt;br/&gt;正例:initialCapacity = (需要存储的元素个数 / 负载因子) + 1。注意负载因子(即 loader factor)默认为 0.75，如果暂时无法确定初始值大小，请设置为 16(即默认值)。</span><br><span class="line">&lt;br/&gt;反例:HashMap 需要放置 1024 个元素，由于没有设置容量初始大小，随着元素不断增加，容 量 7 次被迫扩大，resize 需要重建 hash 表，严重影响性能。</span><br><span class="line"></span><br><span class="line">11. 【推荐】使用 entrySet 遍历 Map 类集合 KV，而不是 keySet 方式进行遍历。</span><br><span class="line">&lt;br/&gt;说明:keySet 其实是遍历了 2 次，一次是转为 Iterator 对象，另一次是从 hashMap 中取出 key 所对应的 value。而 entrySet 只是遍历了一次就把 key 和 value 都放到了 entry 中，效率更高。如果是 JDK8，使用 Map.foreach 方法。</span><br><span class="line">&lt;br/&gt;正例:values()返回的是 V 值集合，是一个 list 集合对象;keySet()返回的是 K 值集合，是一个 Set 集合对象;entrySet()返回的是 K-V 值组合集合。</span><br><span class="line"></span><br><span class="line">12. 【推荐】高度注意 Map 类集合 K/V 能不能存储 null 值的情况，如下表格:</span><br><span class="line"></span><br><span class="line">|  集合类   |    Key   | Value   |Super | 说明 |</span><br><span class="line">| ----- | ----- | ----- | ----- | ----- |</span><br><span class="line">| Hashtable | 不允许为 null | 不允许为 null  |  Dictionary|线程安全|</span><br><span class="line">| ConcurrentHashMap | 不允许为 null | 不允许为 null |AbstractMap | 锁分段技术(JDK8:CAS)|</span><br><span class="line">| TreeMap | 不允许为 null | 允许为 null | AbstractMap | 线程不安全 |</span><br><span class="line">| HashMap | 允许为 null | 允许为 null |  AbstractMap | 线程不安全 |</span><br><span class="line">&lt;br/&gt;反例: 由于 HashMap 的干扰，很多人认为 ConcurrentHashMap 是可以置入 null 值，而事实上， 存储 null 值时会抛出 NPE 异常。</span><br><span class="line"></span><br><span class="line">13. 【参考】合理利用好集合的有序性(sort)和稳定性(order)，避免集合的无序性(unsort)和 不稳定性(unorder)带来的负面影响。</span><br><span class="line">&lt;br/&gt;说明:有序性是指遍历的结果是按某种比较规则依次排列的。稳定性指集合每次遍历的元素次 序是一定的。如:ArrayList 是 order/unsort;HashMap 是 unorder/unsort;TreeSet 是 order/sort。</span><br><span class="line"></span><br><span class="line">14. 【参考】利用 Set 元素唯一的特性，可以快速对一个集合进行去重操作，避免使用 List 的 contains 方法进行遍历、对比、去重操作。</span><br><span class="line"></span><br><span class="line">##  (六) 并发处理</span><br><span class="line">1. 【强制】获取单例对象需要保证线程安全，其中的方法也要保证线程安全。</span><br><span class="line">&lt;br/&gt;说明:资源驱动类、工具类、单例工厂类都需要注意。</span><br><span class="line"></span><br><span class="line">2. 【强制】创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。</span><br><span class="line">&lt;br/&gt;正例:</span><br></pre></td></tr></table></figure></user></p><p>public class TimerTaskThread extends Thread {<br>     public TimerTaskThread() {<br>        super.setName(“TimerTaskThread”);<br>        …<br>     }<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3. 【强制】线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。</span><br><span class="line">&lt;br/&gt;说明:使用线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源的开销，解决 资源不足的问题。如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或 者“过度切换”的问题。</span><br><span class="line"></span><br><span class="line">4. 【强制】线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。</span><br><span class="line">&lt;br/&gt;说明:Executors 返回的线程池对象的弊端如下:</span><br><span class="line">  1.  FixedThreadPool 和 SingleThreadPool:</span><br><span class="line">      允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。        </span><br><span class="line">  2.  CachedThreadPool 和 ScheduledThreadPool:</span><br><span class="line">      允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5. 【强制】SimpleDateFormat 是线程不安全的类，一般不要定义为static变量，如果定义为</span><br><span class="line">static，必须加锁，或者使用 DateUtils 工具类。</span><br><span class="line">&lt;br/&gt;正例:注意线程安全，使用 DateUtils。亦推荐如下处理:</span><br></pre></td></tr></table></figure></p><p>private static final ThreadLocal<dateformat> df = new ThreadLocal<dateformat>() {<br>      @Override<br>      protected DateFormat initialValue() {<br>        return new SimpleDateFormat(“yyyy-MM-dd”);<br>      }<br>};<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;br/&gt;说明:如果是 JDK8 的应用，可以使用 Instant 代替 Date，LocalDateTime 代替 Calendar， DateTimeFormatter 代替 SimpleDateFormat，官方给出的解释:simple beautiful strong immutable thread-safe。</span><br><span class="line"></span><br><span class="line">6. 【强制】高并发时，同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁;能锁区块，就不要锁整个方法体;能用对象锁，就不要用类锁。</span><br><span class="line">&lt;br/&gt;说明:尽可能使加锁的代码块工作量尽可能的小，避免在锁代码块中调用 RPC 方法。</span><br><span class="line"></span><br><span class="line">7. 【强制】对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造成死锁。</span><br><span class="line">&lt;br/&gt;说明:线程一需要对表 A、B、C 依次全部加锁后才可以进行更新操作，那么线程二的加锁顺序 也必须是 A、B、C，否则可能出现死锁。</span><br><span class="line"></span><br><span class="line">8. 【强制】并发修改同一记录时，避免更新丢失，需要加锁。要么在应用层加锁，要么在缓存加锁，要么在数据库层使用乐观锁，使用 version 作为更新依据。</span><br><span class="line">&lt;br/&gt;说明:如果每次访问冲突概率小于 20%，推荐使用乐观锁，否则使用悲观锁。乐观锁的重试次 数不得小于 3 次。</span><br><span class="line"></span><br><span class="line">9. 【强制】多线程并行处理定时任务时，Timer 运行多个 TimeTask 时，只要其中之一没有捕获 抛出的异常，其它任务便会自动终止运行，使用 ScheduledExecutorService 则没有这个问题。</span><br><span class="line"></span><br><span class="line">10. 【推荐】使用 CountDownLatch 进行异步转同步操作，每个线程退出前必须调用 countDown 方法，线程执行代码注意 catch 异常，确保 countDown 方法被执行到，避免主线程无法执行 至 await 方法，直到超时才返回结果。</span><br><span class="line">&lt;br/&gt;说明:注意，子线程抛出异常堆栈，不能在主线程 try-catch 到。</span><br><span class="line"></span><br><span class="line">11. 【推荐】避免 Random 实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一</span><br><span class="line">seed 导致的性能下降。</span><br><span class="line">&lt;br/&gt;说明:Random 实例包括 java.util.Random 的实例或者 Math.random()的方式。</span><br><span class="line">&lt;br/&gt;正例:在 JDK7 之后，可以直接使用 API ThreadLocalRandom，而在 JDK7 之前，需要编码保证每个线程持有一个实例。</span><br><span class="line"></span><br><span class="line">12. 【推荐】在并发场景下，通过双重检查锁(double-checked locking)实现延迟初始化的优 化问题隐患(可参考 The &quot;Double-Checked Locking is Broken&quot; Declaration)，推荐解 决方案中较为简单一种(适用于 JDK5 及以上版本)，将目标属性声明为 volatile 型。</span><br><span class="line">&lt;br/&gt;反例:</span><br></pre></td></tr></table></figure></dateformat></dateformat></p><p>class LazyInitDemo {<br>      private Helper helper = null;<br>      public Helper getHelper() {<br>        if (helper == null) synchronized(this) {<br>          if (helper == null)<br>            helper = new Helper();<br>          }<br>        return helper;<br>      }<br>      // other methods and fields…<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">13. 【参考】volatile 解决多线程内存不可见问题。对于一写多读，是可以解决变量同步问题， 但是如果多写，同样无法解决线程安全问题。如果是 count++操作，使用如下类实现: AtomicInteger count = new AtomicInteger(); count.addAndGet(1); 如果是 JDK8，推 荐使用 LongAdder 对象，比 AtomicLong 性能更好(减少乐观锁的重试次数)。</span><br><span class="line"></span><br><span class="line">14. 【参考】 HashMap 在容量不够进行 resize 时由于高并发可能出现死链，导致 CPU 飙升，在开发过程中可以使用其它数据结构或加锁来规避此风险。</span><br><span class="line"></span><br><span class="line">15. 【参考】ThreadLocal 无法解决共享对象的更新问题，ThreadLocal 对象建议使用 static 修饰。这个变量是针对一个线程内所有操作共享的，所以设置为静态变量，所有此类实例共享 此静态变量 ，也就是说在类第一次被使用时装载，只分配一块存储空间，所有此类的对象(只 要是这个线程内定义的)都可以操控这个变量。</span><br><span class="line"></span><br><span class="line">##  (七) 控制语句</span><br><span class="line">1. 【强制】在一个 switch 块内，每个 case 要么通过 break/return 等来终止，要么注释说明程 序将继续执行到哪一个 case 为止;在一个 switch 块内，都必须包含一个 default 语句并且 放在最后，即使空代码。</span><br><span class="line"></span><br><span class="line">2. 【强制】在 if/else/for/while/do 语句中必须使用大括号。即使只有一行代码，避免采用 单行的编码方式:if (condition) statements;</span><br><span class="line"></span><br><span class="line">3. 【强制】在高并发场景中，避免使用”等于”判断作为中断或退出的条件。</span><br><span class="line">&lt;br/&gt;说明:如果并发控制没有处理好，容易产生等值判断被“击穿”的情况，使用大于或小于的区间 判断条件来代替。</span><br><span class="line">&lt;br/&gt;反例:判断剩余奖品数量等于 0 时，终止发放奖品，但因为并发处理错误导致奖品数量瞬间变 成了负数，这样的话，活动无法终止。</span><br><span class="line"></span><br><span class="line">4. 【推荐】表达异常的分支时，少用 if-else 方式，这种方式可以改写成:</span><br></pre></td></tr></table></figure></p><p>if (condition) {<br>      …<br>      return obj;<br>}<br>// 接着写 else 的业务逻辑代码;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;br/&gt;说明:如果非得使用 if()...else if()...else...方式表达逻辑，【强制】避免后续代码维护困难，请勿超过 3 层。</span><br><span class="line">&lt;br/&gt;正例:超过 3 层的 if-else 的逻辑判断代码可以使用卫语句、策略模式、状态模式等来实现， 其中卫语句示例如下:</span><br></pre></td></tr></table></figure></p><p>public void today() {<br>    if (isBusy()) {<br>      System.out.println(“change time.”);<br>      return;<br>    }</p><pre><code>if (isFree()) {  System.out.println(“go to travel.”);  return;}System.out.println(“stay at home to learn Alibaba Java Coding Guidelines.”);return;</code></pre><p>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">5. 【推荐】除常用方法(如 getXxx/isXxx)等外，不要在条件判断中执行其它复杂的语句，将复杂逻辑判断的结果赋值给一个有意义的布尔变量名，以提高可读性。</span><br><span class="line">&lt;br/&gt;说明:很多 if 语句内的逻辑相当复杂，阅读者需要分析条件表达式的最终结果，才能明确什么样的条件执行什么样的语句，那么，如果阅读者分析逻辑表达式错误呢?</span><br><span class="line">&lt;br/&gt;正例:</span><br></pre></td></tr></table></figure></p><p>// 伪代码如下<br>final boolean existed = (file.open(fileName, “w”) != null) &amp;&amp; (…) || (…);<br>if (existed) {<br>      …<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;br/&gt;反例:</span><br></pre></td></tr></table></figure></p><p>if ((file.open(fileName, “w”) != null) &amp;&amp; (…) || (…)) { …<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">6. 【推荐】循环体中的语句要考量性能，以下操作尽量移至循环体外处理，如定义对象、变量、</span><br><span class="line">获取数据库连接，进行不必要的 try-catch 操作(这个 try-catch 是否可以移至循环体外)。</span><br><span class="line"></span><br><span class="line">7. 【推荐】避免采用取反逻辑运算符。 说明:取反逻辑不利于快速理解，并且取反逻辑写法必然存在对应的正向逻辑写法。 正例:使用 if (x &lt; 628) 来表达 x 小于 628。</span><br><span class="line">&lt;br/&gt;反例:使用 if (!(x &gt;= 628)) 来表达 x 小于 628。</span><br><span class="line"></span><br><span class="line">8. 【推荐】接口入参保护，这种场景常见的是用作批量操作的接口。</span><br><span class="line"></span><br><span class="line">9. 【参考】下列情形，需要进行参数校验:</span><br><span class="line">  1. 调用频次低的方法。</span><br><span class="line">  2. 执行时间开销很大的方法。此情形中，参数校验时间几乎可以忽略不计，但如果因为参</span><br><span class="line">数错误导致中间执行回退，或者错误，那得不偿失。</span><br><span class="line">  3. 需要极高稳定性和可用性的方法。</span><br><span class="line">  4. 对外提供的开放接口，不管是RPC/API/HTTP接口。</span><br><span class="line">  5. 敏感权限入口。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">10. 【参考】下列情形，不需要进行参数校验:</span><br><span class="line">  1. 极有可能被循环调用的方法。但在方法说明里必须注明外部参数检查要求。</span><br><span class="line">  2. 底层调用频度比较高的方法。毕竟是像纯净水过滤的最后一道，参数错误不太可能到底</span><br><span class="line">层才会暴露问题。一般 DAO 层与 Service 层都在同一个应用中，部署在同一台服务器中，所以 DAO 的参数校验，可以省略。</span><br><span class="line">  3. 被声明成private只会被自己代码所调用的方法，如果能够确定调用方法的代码传入参数已经做过检查或者肯定不会有问题，此时可以不校验参数。</span><br><span class="line"></span><br><span class="line">##  (八) 注释规约</span><br><span class="line">1. 【强制】类、类属性、类方法的注释必须使用 Javadoc 规范，使用```/**内容*/```格式，不得使用 ```// xxx```方式。</span><br><span class="line">&lt;br/&gt;说明:在 IDE 编辑窗口中，Javadoc 方式会提示相关注释，生成 Javadoc 可以正确输出相应注释;在 IDE 中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高 阅读效率。</span><br><span class="line"></span><br><span class="line">2. 【强制】所有的抽象方法(包括接口中的方法)必须要用 Javadoc 注释、除了返回值、参数、 异常说明外，还必须指出该方法做什么事情，实现什么功能。</span><br><span class="line">&lt;br/&gt;说明:对子类的实现要求，或者调用注意事项，请一并说明。</span><br><span class="line"></span><br><span class="line">3. 【强制】所有的类都必须添加创建者和创建日期。</span><br><span class="line"></span><br><span class="line">4. 【强制】方法内部单行注释，在被注释语句上方另起一行，使用//注释。方法内部多行注释</span><br><span class="line">使用```/* */```注释，注意与代码对齐。</span><br><span class="line"></span><br><span class="line">5. 【强制】所有的枚举类型字段必须要有注释，说明每个数据项的用途。</span><br><span class="line"></span><br><span class="line">6. 【推荐】与其“半吊子”英文来注释，不如用中文注释把问题说清楚。专有名词与关键字保持 英文原文即可。</span><br><span class="line">&lt;br/&gt;反例:“TCP 连接超时”解释成“传输控制协议连接超时”，理解反而费脑筋。</span><br><span class="line"></span><br><span class="line">7. 【推荐】代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑 等的修改。</span><br><span class="line">&lt;br/&gt;说明:代码与注释更新不同步，就像路网与导航软件更新不同步一样，如果导航软件严重滞后， 就失去了导航的意义。</span><br><span class="line"></span><br><span class="line">8. 【参考】谨慎注释掉代码。在上方详细说明，而不是简单地注释掉。如果无用，则删除。</span><br><span class="line">&lt;br/&gt;说明:代码被注释掉有两种可能性:</span><br><span class="line">  1. 后续会恢复此段代码逻辑。</span><br><span class="line">  2. 永久不用。前者如果没有备注信息，难以知晓注释动机。后者建议直接删掉(代码仓库保存了历史代码)。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">9. 【参考】对于注释的要求:第一、能够准确反应设计思想和代码逻辑;第二、能够描述业务含义，使别的程序员能够迅速了解到代码背后的信息。完全没有注释的大段代码对于阅读者形同 天书，注释是给自己看的，即使隔很长时间，也能清晰理解当时的思路;注释也是给继任者看的，使其能够快速接替自己的工作。</span><br><span class="line"></span><br><span class="line">10. 【参考】好的命名、代码结构是自解释的，注释力求精简准确、表达到位。避免出现注释的一个极端:过多过滥的注释，代码的逻辑一旦修改，修改注释是相当大的负担。</span><br><span class="line">&lt;br/&gt;反例:</span><br></pre></td></tr></table></figure></p><p>// put elephant into fridge<br>put(elephant, fridge);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">方法名 put，加上两个有意义的变量名 elephant 和 fridge，已经说明了这是在干什么，语义清晰的代码不需要额外的注释。</span><br><span class="line"></span><br><span class="line">11. 【参考】特殊注释标记，请注明标记人与标记时间。注意及时处理这些标记，通过标记扫描,经常清理此类标记。线上故障有时候就是来源于这些标记处的代码。</span><br><span class="line">  1.  待办事宜(TODO):( 标记人，标记时间，[预计处理时间]) 表示需要实现，但目前还未实现的功能。这实际上是一个 Javadoc 的标签，目前的 Javadoc</span><br><span class="line">还没有实现，但已经被广泛使用。只能应用于类，接口和方法(因为它是一个 Javadoc 标签)。</span><br><span class="line">  2. 错误，不能工作(FIXME):(标记人，标记时间，[预计处理时间])</span><br><span class="line">在注释中用 FIXME 标记某代码是错误的，而且不能工作，需要及时纠正的情况。</span><br><span class="line"></span><br><span class="line">##  (九) 其它</span><br><span class="line">1. 【强制】在使用正则表达式时，利用好其预编译功能，可以有效加快正则匹配速度。</span><br><span class="line">&lt;br/&gt;说明:不要在方法体内定义:Pattern pattern = Pattern.compile(“规则”);</span><br><span class="line"></span><br><span class="line">2. 【强制】velocity 调用 POJO 类的属性时，建议直接使用属性名取值即可，模板引擎会自动按 规范调用 POJO 的 getXxx()，如果是 boolean 基本数据类型变量(boolean 命名不需要加 is 前缀)，会自动调用 isXxx()方法。</span><br><span class="line">&lt;br/&gt;说明:注意如果是 Boolean 包装类对象，优先调用 getXxx()的方法。</span><br><span class="line"></span><br><span class="line">3. 【强制】后台输送给页面的变量必须加$!&#123;var&#125;——中间的感叹号。</span><br><span class="line">&lt;br/&gt;说明:如果 var 等于 null 或者不存在，那么$&#123;var&#125;会直接显示在页面上。</span><br><span class="line"></span><br><span class="line">4. 【强制】注意 Math.random() 这个方法返回是 double 类型，注意取值的范围 0≤x&lt;1(能够 取到零值，注意除零异常)，如果想获取整数类型的随机数，不要将 x 放大 10 的若干倍然后 取整，直接使用 Random 对象的 nextInt 或者 nextLong 方法。</span><br><span class="line"></span><br><span class="line">5. 【强制】获取当前毫秒数 System.currentTimeMillis(); 而不是 new Date().getTime();</span><br><span class="line">&lt;br/&gt;说明:如果想获取更加精确的纳秒级时间值，使用 System.nanoTime()的方式。在 JDK8 中， 针对统计时间等场景，推荐使用 Instant 类。</span><br><span class="line"></span><br><span class="line">6. 【推荐】不要在视图模板中加入任何复杂的逻辑。</span><br><span class="line">&lt;br/&gt;说明:根据 MVC 理论，视图的职责是展示，不要抢模型和控制器的活。</span><br><span class="line"></span><br><span class="line">7. 【推荐】任何数据结构的构造或初始化，都应指定大小，避免数据结构无限增长吃光内存。</span><br><span class="line"></span><br><span class="line">8. 【推荐】及时清理不再使用的代码段或配置信息。 说明:对于垃圾代码或过时配置，坚决清理干净，避免程序过度臃肿，代码冗余。</span><br><span class="line">&lt;br/&gt;正例:对于暂时被注释掉，后续可能恢复使用的代码片断，在注释代码上方，统一规定使用三 个斜杠(///)来说明注释掉代码的理由。</span><br><span class="line"></span><br><span class="line"># 二、异常日志</span><br><span class="line">##  (一) 异常处理</span><br><span class="line">1. 【强制】Java 类库中定义的可以通过预检查方式规避的 RuntimeException 异常不应该通过 catch 的方式来处理，比如:NullPointerException，IndexOutOfBoundsException 等等。</span><br><span class="line">&lt;br/&gt;说明:无法通过预检查的异常除外，比如，在解析字符串形式的数字时，不得不通过 catch NumberFormatException 来实现。</span><br><span class="line">&lt;br/&gt;正例:if (obj != null) &#123;...&#125;</span><br><span class="line">&lt;br/&gt;反例:try &#123; obj.method(); &#125; catch (NullPointerException e) &#123;...&#125;</span><br><span class="line"></span><br><span class="line">2. 【强制】异常不要用来做流程控制，条件控制。</span><br><span class="line">&lt;br/&gt;说明:异常设计的初衷是解决程序运行中的各种意外情况，且异常的处理效率比条件判断方式要低很多。</span><br><span class="line"></span><br><span class="line">3. 【强制】catch 时请分清稳定代码和非稳定代码，稳定代码指的是无论如何不会出错的代码。 对于非稳定代码的 catch 尽可能进行区分异常类型，再做对应的异常处理。 说明:对大段代码进行 try-catch，使程序无法根据不同的异常做出正确的应激反应，也不利于定位问题，这是一种不负责任的表现。</span><br><span class="line">&lt;br/&gt;正例:用户注册的场景中，如果用户输入非法字符，或用户名称已存在，或用户输入密码过于简单，在程序上作出分门别类的判断，并提示给用户。</span><br><span class="line"></span><br><span class="line">4. 【强制】捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。</span><br><span class="line"></span><br><span class="line">5. 【强制】有 try 块放到了事务代码中，catch 异常后，如果需要回滚事务，一定要注意手动回滚事务。</span><br><span class="line"></span><br><span class="line">6. 【强制】finally 块必须对资源对象、流对象进行关闭，有异常也要做 try-catch。 &lt;br/&gt;说明:如果 JDK7 及以上，可以使用 try-with-resources 方式。</span><br><span class="line"></span><br><span class="line">7. 【强制】不要在 finally 块中使用 return。</span><br><span class="line">&lt;br/&gt;说明:finally 块中的 return 返回后方法结束执行，不会再执行 try 块中的 return 语句。</span><br><span class="line"></span><br><span class="line">8. 【强制】捕获异常与抛异常，必须是完全匹配，或者捕获异常是抛异常的父类。</span><br><span class="line">&lt;br/&gt;说明:如果预期对方抛的是绣球，实际接到的是铅球，就会产生意外情况。</span><br><span class="line"></span><br><span class="line">9. 【推荐】方法的返回值可以为 null，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下会返回 null 值。</span><br><span class="line">&lt;br/&gt;说明:本手册明确防止 NPE 是调用者的责任。即使被调用方法返回空集合或者空对象，对调用者来说，也并非高枕无忧，必须考虑到远程调用失败、序列化失败、运行时异常等场景返回 null 的情况。</span><br><span class="line"></span><br><span class="line">10. 【推荐】防止 NPE，是程序员的基本修养，注意 NPE 产生的场景:</span><br><span class="line">  1. 返回类型为基本数据类型，return 包装数据类型的对象时，自动拆箱有可能产生 NPE。</span><br><span class="line">&lt;br/&gt;反例:public int f() &#123; return Integer 对象&#125;， 如果为 null，自动解箱抛 NPE。</span><br><span class="line">  2. 数据库的查询结果可能为null。</span><br><span class="line">  3. 集合里的元素即使isNotEmpty，取出的数据元素也可能为null。</span><br><span class="line">  4. 远程调用返回对象时，一律要求进行空指针判断，防止NPE。</span><br><span class="line">  5. 对于Session中获取的数据，建议NPE检查，避免空指针。</span><br><span class="line">  6. 级联调用obj.getA().getB().getC();一连串调用，易产生NPE。</span><br><span class="line">&lt;br/&gt;正例:使用 JDK8 的 Optional 类来防止 NPE 问题。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">11. 【推荐】定义时区分unchecked/checked 异常，避免直接抛出newRuntimeException()，更不允许抛出 Exception 或者 Throwable，应使用有业务含义的自定义异常。推荐业界已定义过的自定义异常，如:DAOException / ServiceException等。</span><br><span class="line"></span><br><span class="line">12. 【参考】对于公司外的 http/api 开放接口必须使用“错误码”;而应用内部推荐异常抛出; 跨应用间 RPC 调用优先考虑使用 Result 方式，封装 isSuccess()方法、“错误码”、“错误简短信息”。</span><br><span class="line">&lt;br/&gt;说明:关于 RPC 方法返回方式使用 Result 方式的理由:</span><br><span class="line">  1.  使用抛异常返回方式，调用方如果没有捕获到就会产生运行时错误。</span><br><span class="line">  2.  如果不加栈信息，只是new自定义异常，加入自己的理解的error message，对于调用 端解决问题的帮助不会太多。如果加了栈信息，在频繁调用出错的情况下，数据序列化和传输 的性能损耗也是问题。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">13. 【参考】避免出现重复的代码(Don’t Repeat Yourself)，即DRY原则。</span><br><span class="line">&lt;br/&gt;说明:随意复制和粘贴代码，必然会导致代码的重复，在以后需要修改时，需要修改所有的副本，容易遗漏。必要时抽取共性方法，或者抽象公共类，甚至是组件化。</span><br><span class="line">&lt;br/&gt;正例:一个类中有多个 public 方法，都需要进行数行相同的参数校验操作，这个时候请抽取:</span><br><span class="line">         private boolean checkParam(DTO dto) &#123;...&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##       (二) 日志规约</span><br><span class="line">1. 【强制】应用中不可直接使用日志系统(Log4j、Logback)中的 API，而应依赖使用日志框架SLF4J 中的 API，使用门面模式的日志框架，有利于维护和各个类的日志处理方式统一。</span><br></pre></td></tr></table></figure></p><p>import org.slf4j.Logger;<br>import org.slf4j.LoggerFactory;<br>private static final Logger logger = LoggerFactory.getLogger(Abc.class);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. 【强制】日志文件至少保存 15 天，因为有些异常具备以“周”为频次发生的特点。</span><br><span class="line"></span><br><span class="line">3. 【强制】应用中的扩展日志(如打点、临时监控、访问日志等)命名方式:          </span><br><span class="line">       appName_logType_logName.log。</span><br><span class="line">logType:日志类型，如 stats/monitor/access 等;logName:日志描述。这种命名的好处: 通过文件名就可知道日志文件属于什么应用，什么类型，什么目的，也有利于归类查找。</span><br><span class="line">&lt;br/&gt;正例:mppserver 应用中单独监控时区转换异常，如:</span><br><span class="line">       mppserver_monitor_timeZoneConvert.log</span><br><span class="line">&lt;br/&gt;说明:推荐对日志进行分类，如将错误日志和业务日志分开存放，便于开发人员查看，也便于通过日志对系统进行及时监控。</span><br><span class="line"></span><br><span class="line">4. 【强制】对 trace/debug/info 级别的日志输出，必须使用条件输出形式或者使用占位符的方式。</span><br><span class="line">&lt;br/&gt;说明:logger.debug(&quot;Processing trade with id: &quot; + id + &quot; and symbol: &quot; + symbol); 如果日志级别是 warn，上述日志不会打印，但是会执行字符串拼接操作，如果 symbol 是对象， 会执行 toString()方法，浪费了系统资源，执行了上述操作，最终日志却没有打印。</span><br><span class="line">&lt;br/&gt;正例:(条件)建设采用如下方式</span><br></pre></td></tr></table></figure></p><p>if (logger.isDebugEnabled()) {<br>      logger.debug(“Processing trade with id: “ + id + “ and symbol: “ + symbol);<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;br/&gt;正例:(占位符)</span><br><span class="line">       logger.debug(&quot;Processing trade with id: &#123;&#125; and symbol : &#123;&#125; &quot;, id, symbol);</span><br><span class="line"></span><br><span class="line">5. 【强制】避免重复打印日志，浪费磁盘空间，务必在 log4j.xml 中设置 additivity=false。</span><br><span class="line">&lt;br/&gt;正例:&lt;logger name=&quot;com.taobao.dubbo.config&quot; additivity=&quot;false&quot;&gt;</span><br><span class="line"></span><br><span class="line">6. 【强制】异常信息应该包括两类信息:案发现场信息和异常堆栈信息。如果不处理，那么通过 关键字 throws 往上抛出。</span><br><span class="line">&lt;br/&gt;正例:```logger.error(各类参数或者对象toString() + &quot;_&quot; + e.getMessage(), e);</span><br></pre></td></tr></table></figure></p><ol start="7"><li><p>【推荐】谨慎地记录日志。生产环境禁止输出 debug 日志;有选择地输出 info 日志;如果使 用 warn 来记录刚上线时的业务行为信息，一定要注意日志输出量的问题，避免把服务器磁盘 撑爆，并记得及时删除这些观察日志。<br><br>说明:大量地输出无效日志，不利于系统性能提升，也不利于快速定位错误点。记录日志时请思考:这些日志真的有人看吗?看到这条日志你能做什么?能不能给问题排查带来好处?</p></li><li><p>【推荐】可以使用 warn 日志级别来记录用户输入参数错误的情况，避免用户投诉时，无所适从。如非必要，请不要在此场景打出 error 级别，避免频繁报警。<br><br>说明:注意日志输出的级别，error 级别只记录系统逻辑出错、异常或者重要的错误信息。</p></li><li><p>【推荐】尽量用英文来描述日志错误信息，如果日志中的错误信息用英文描述不清楚的话使用中文描述即可，否则容易产生歧义。国际化团队或海外部署的服务器由于字符集问题，【强制】 使用全英文来注释和描述日志错误信息。</p></li></ol><h2 id="三、单元测试"><a href="#三、单元测试" class="headerlink" title="三、单元测试"></a>三、单元测试</h2><ol><li><p>【强制】好的单元测试必须遵守 AIR 原则。<br><br>说明:单元测试在线上运行时，感觉像空气(AIR)一样并不存在，但在测试质量的保障上，却是非常关键的。好的单元测试宏观上来说，具有自动化、独立性、可重复执行的特点。</p><ul><li>A:Automatic(自动化)</li><li>I:Independent(独立性)</li><li>R:Repeatable(可重复)</li></ul></li></ol><ol start="2"><li><p>【强制】单元测试应该是全自动执行的，并且非交互式的。测试用例通常是被定期执行的，执行过程必须完全自动化才有意义。输出结果需要人工检查的测试不是一个好的单元测试。单元测试中不准使用 System.out 来进行人肉验证，必须使用 assert 来验证。</p></li><li><p>【强制】保持单元测试的独立性。为了保证单元测试稳定可靠且便于维护，单元测试用例之间决不能互相调用，也不能依赖执行的先后次序。<br><br>反例:method2 需要依赖 method1 的执行，将执行结果作为 method2 的输入。</p></li><li><p>【强制】单元测试是可以重复执行的，不能受到外界环境的影响。<br><br>说明:单元测试通常会被放到持续集成中，每次有代码check in时单元测试都会被执行。如 果单测对外部环境(网络、服务、中间件等)有依赖，容易导致持续集成机制的不可用。<br><br>正例:为了不受外界环境影响，要求设计代码时就把 SUT 的依赖改成注入，在测试时用 spring 这样的 DI 框架注入一个本地(内存)实现或者 Mock 实现。</p></li><li><p>【强制】对于单元测试，要保证测试粒度足够小，有助于精确定位问题。单测粒度至多是类级别，一般是方法级别。<br><br>说明:只有测试粒度小才能在出错时尽快定位到出错位置。单测不负责检查跨类或者跨系统的 交互逻辑，那是集成测试的领域。</p></li><li><p>【强制】核心业务、核心应用、核心模块的增量代码确保单元测试通过。 说明:新增代码及时补充单元测试，如果新增代码影响了原有单元测试，请及时修正。</p></li><li><p>【强制】单元测试代码必须写在如下工程目录:src/test/java，不允许写在业务代码目录下。<br><br>说明:源码构建时会跳过此目录，而单元测试框架默认是扫描此目录。</p></li><li><p>【推荐】单元测试的基本目标:语句覆盖率达到 70%;核心模块的语句覆盖率和分支覆盖率都 要达到 100%<br><br>说明:在工程规约的应用分层中提到的 DAO 层，Manager 层，可重用度高的 Service，都应该 进行单元测试。</p></li><li><p>【推荐】编写单元测试代码遵守 BCDE 原则，以保证被测试模块的交付质量。</p><ul><li>B:Border，边界值测试，包括循环边界、特殊取值、特殊时间点、数据顺序等</li><li>C:Correct，正确的输入，并得到预期的结果。</li><li>D:Design，与设计文档相结合，来编写单元测试。</li><li>E:Error，强制错误信息输入(如:非法数据、异常流程、非业务允许输入等)，并得 到预期的结果。</li></ul></li></ol><ol start="10"><li><p>【推荐】对于数据库相关的查询，更新，删除等操作，不能假设数据库里的数据是存在的， 或者直接操作数据库把数据插入进去，请使用程序插入或者导入数据的方式来准备数据。<br><br>反例:删除某一行数据的单元测试，在数据库中，先直接手动增加一行作为删除目标，但是这 一行新增数据并不符合业务插入规则，导致测试结果异常。</p></li><li><p>【推荐】和数据库相关的单元测试，可以设定自动回滚机制，不给数据库造成脏数据。或者对单元测试产生的数据有明确的前后缀标识。<br><br>正例:在 RDC 内部单元测试中，使用 RDC_UNIT_TEST_的前缀标识数据。</p></li><li><p>【推荐】对于不可测的代码建议做必要的重构，使代码变得可测，避免为了达到测试要求而书写不规范测试代码。</p></li><li><p>【推荐】在设计评审阶段，开发人员需要和测试人员一起确定单元测试范围，单元测试最好覆盖所有测试用例。</p></li><li><p>【推荐】单元测试作为一种质量保障手段，不建议项目发布后补充单元测试用例，建议在项目提测前完成单元测试。</p></li><li><p>【参考】为了更方便地进行单元测试，业务代码应避免以下情况:</p><ul><li>构造方法中做的事情过多。</li><li>存在过多的全局变量和静态方法。</li><li>存在过多的外部依赖。</li><li>存在过多的条件语句。 说明:多层条件语句建议使用卫语句、策略模式、状态模式等方式重构。</li></ul></li></ol><ol start="16"><li>【参考】不要对单元测试存在如下误解:<ul><li>那是测试同学干的事情。本文是开发手册，凡是本文内容都是与开发同学强相关的</li><li>单元测试代码是多余的。系统的整体功能与各单元部件的测试正常与否是强相关的</li><li>单元测试代码不需要维护。一年半载后，那么单元测试几乎处于废弃状态。</li><li>单元测试与线上故障没有辩证关系。好的单元测试能够最大限度地规避线上故障。</li></ul></li></ol><h2 id="四、安全规约"><a href="#四、安全规约" class="headerlink" title="四、安全规约"></a>四、安全规约</h2><ol><li><p>【强制】隶属于用户个人的页面或者功能必须进行权限控制校验。<br><br>说明:防止没有做水平权限校验就可随意访问、修改、删除别人的数据，比如查看他人的私信 内容、修改他人的订单。</p></li><li><p>【强制】用户敏感数据禁止直接展示，必须对展示数据进行脱敏。<br><br>说明:中国大陆个人手机号码显示为:158<em>**</em>9119，隐藏中间 4 位，防止隐私泄露。</p></li><li><p>【强制】用户输入的 SQL 参数严格使用参数绑定或者 METADATA 字段值限定，防止 SQL 注入， 禁止字符串拼接 SQL 访问数据库。</p></li><li><p>【强制】用户请求传入的任何参数必须做有效性验证。<br>说明:忽略参数校验可能导致:</p><ul><li>page size 过大导致内存溢出</li><li>恶意 order by 导致数据库慢查询</li><li>任意重定向</li><li>SQL 注入</li><li>反序列化注入</li><li>正则输入源串拒绝服务 ReDoS<br><br>说明:Java 代码用正则来验证客户端的输入，有些正则写法验证普通用户输入没有问题， 但是如果攻击人员使用的是特殊构造的字符串来验证，有可能导致死循环的结果。</li></ul></li></ol><ol start="5"><li><p>【强制】禁止向 HTML 页面输出未经安全过滤或未正确转义的用户数据。</p></li><li><p>【强制】表单、AJAX 提交必须执行 CSRF 安全验证。<br><br>说明:CSRF(Cross-site request forgery)跨站请求伪造是一类常见编程漏洞。对于存在 CSRF 漏洞的应用/网站，攻击者可以事先构造好 URL，只要受害者用户一访问，后台便在用户 不知情的情况下对数据库中用户参数进行相应修改。</p></li><li><p>【强制】在使用平台资源，譬如短信、邮件、电话、下单、支付，必须实现正确的防重放的机制，如数量限制、疲劳度控制、验证码校验，避免被滥刷而导致资损。<br><br>说明:如注册时发送验证码到手机，如果没有限制次数和频率，那么可以利用此功能骚扰到其它用户，并造成短信平台资源浪费。</p></li><li><p>【推荐】发贴、评论、发送即时消息等用户生成内容的场景必须实现防刷、文本内容违禁词过滤等风控策略。</p></li></ol><h1 id="五、MySQL-数据库"><a href="#五、MySQL-数据库" class="headerlink" title="五、MySQL 数据库"></a>五、MySQL 数据库</h1><h2 id="一-建表规约"><a href="#一-建表规约" class="headerlink" title="(一) 建表规约"></a>(一) 建表规约</h2><ol><li><p>【强制】表达是与否概念的字段，必须使用 is_xxx 的方式命名，数据类型是 unsigned tinyint (1 表示是，0 表示否)。<br><br>说明:任何字段如果为非负数，必须是 unsigned。<br><br>注意:POJO 类中的任何布尔类型的变量，都不要加 is 前缀，所以，需要在<resultmap>设置 从 is_xxx 到 Xxx 的映射关系。数据库表示是与否的值，使用 tinyint 类型，坚持 is_xxx 的 命名方式是为了明确其取值含义与取值范围。<br><br>正例:表达逻辑删除的字段名 is_deleted，1 表示删除，0 表示未删除。</resultmap></p></li><li><p>【强制】表名、字段名必须使用小写字母或数字，禁止出现数字开头，禁止两个下划线中间只出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。<br><br>说明:MySQL 在 Windows 下不区分大小写，但在 Linux 下默认是区分大小写。因此，数据库名、 表名、字段名，都不允许出现任何大写字母，避免节外生枝。<br><br>正例:aliyun_admin，rdc_config，level3_name<br><br>反例:AliyunAdmin，rdcConfig，level_3_name</p></li><li><p>【强制】表名不使用复数名词。 说明:表名应该仅仅表示表里面的实体内容，不应该表示实体数量，对应于 DO 类名也是单数 形式，符合表达习惯。</p></li><li><p>【强制】禁用保留字，如 desc、range、match、delayed 等，请参考 MySQL 官方保留字。</p></li><li><p>【强制】主键索引名为 pk_字段名;唯一索引名为 uk_字段名;普通索引名则为 idx_字段名。<br><br>说明:pk_ 即 primary key;uk_ 即 unique key;idx_ 即 index 的简称。</p></li><li><p>【强制】小数类型为 decimal，禁止使用 float 和 double。<br><br>说明:float 和 double 在存储的时候，存在精度损失的问题，很可能在值的比较时，得到不正确的结果。如果存储的数据范围超过 decimal 的范围，建议将数据拆成整数和小数分开存储。</p></li><li><p>【强制】如果存储的字符串长度几乎相等，使用 char 定长字符串类型。</p></li><li><p>【强制】varchar 是可变长字符串，不预先分配存储空间，长度不要超过 5000，如果存储长度大于此值，定义字段类型为 text，独立出来一张表，用主键来对应，避免影响其它字段索引效率。</p></li><li><p>【强制】表必备三字段:id, gmt_create, gmt_modified。 说明:其中id必为主键，类型为bigint unsigned、单表时自增、步长为1。gmt_create, gmt_modified 的类型均为 datetime 类型，前者现在时表示主动创建，后者过去分词表示被动更新。</p></li><li><p>【推荐】表的命名最好是加上“业务名称_表的作用”。<br><br>正例:alipay_task / force_project / trade_config</p></li><li><p>【推荐】库名与应用名称尽量一致。</p></li><li><p>【推荐】如果修改字段含义或对字段表示的状态追加时，需要及时更新字段注释。</p></li><li><p>【推荐】字段允许适当冗余，以提高查询性能，但必须考虑数据一致。冗余字段应遵循:</p><ol><li>不是频繁修改的字段。</li><li>不是 varchar 超长字段，更不能是 text 字段。<br><br>正例:商品类目名称使用频率高，字段长度短，名称基本一成不变，可在相关联的表中冗余存储类目名称，避免关联查询。</li></ol></li><li><p>【推荐】单表行数超过 500 万行或者单表容量超过 2GB，才推荐进行分库分表。<br><br>说明:如果预计三年后的数据量根本达不到这个级别，请不要在创建表时就分库分表。</p></li><li><p>【参考】合适的字符存储长度，不但节约数据库表空间、节约索引存储，更重要的是提升检 索速度。<br><br>正例:如下表，其中无符号值可以避免误存负数，且扩大了表示范围。</p></li></ol><table><thead><tr><th>对象</th><th>年龄区间</th><th>类型</th><th>字节</th><th>表示范围</th></tr></thead><tbody><tr><td>人</td><td>150 岁之内</td><td>tinyint unsigned</td><td>1</td><td>无符号值:0 到 255</td></tr><tr><td>龟</td><td>数百岁</td><td>smallint unsigned</td><td>2</td><td>无符号值:0 到 65535</td></tr><tr><td>恐龙化石</td><td>数千万年</td><td>int unsigned</td><td>4</td><td>无符号值:0 到约 42.9 亿</td></tr><tr><td>太阳</td><td>约 50 亿年</td><td>bigint unsigned</td><td>8</td><td>无符号值:0 到约 10 的 19 次方</td></tr></tbody></table><h2 id="二-索引规约"><a href="#二-索引规约" class="headerlink" title="(二) 索引规约"></a>(二) 索引规约</h2><ol><li><p>【强制】业务上具有唯一特性的字段，即使是多个字段的组合，也必须建成唯一索引。<br><br>说明:不要以为唯一索引影响了 insert 速度，这个速度损耗可以忽略，但提高查找速度是明显的;另外，即使在应用层做了非常完善的校验控制，只要没有唯一索引，根据墨菲定律，必然有脏数据产生。</p></li><li><p>【强制】超过三个表禁止 join。需要 join 的字段，数据类型必须绝对一致;多表关联查询时， 保证被关联的字段需要有索引。<br><br>说明:即使双表 join 也要注意表索引、SQL 性能。</p></li><li><p>【强制】在 varchar 字段上建立索引时，必须指定索引长度，没必要对全字段建立索引，根据 实际文本区分度决定索引长度即可。<br><br>说明:索引的长度与区分度是一对矛盾体，一般对字符串类型数据，长度为 20 的索引，区分度会高达 90%以上，可以使用<figure class="highlight plain"><figcaption><span>left(列名, 索引长度))/count(*)的区分度```来确定。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">4. 【强制】页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决。</span><br><span class="line">&lt;br/&gt;说明:索引文件具有 B-Tree 的最左前缀匹配特性，如果左边的值未确定，那么无法使用此索引。</span><br><span class="line"></span><br><span class="line">5. 【推荐】如果有 order by 的场景，请注意利用索引的有序性。order by 最后的字段是组合 索引的一部分，并且放在索引组合顺序的最后，避免出现 file_sort 的情况，影响查询性能。</span><br><span class="line">&lt;br/&gt;正例:where a=? and b=? order by c; 索引:a_b_c</span><br><span class="line">&lt;br/&gt;反例:索引中有范围查找，那么索引有序性无法利用，如:WHERE a&gt;10 ORDER BY b; 索引 a_b 无法排序。</span><br><span class="line"></span><br><span class="line">6. 【推荐】利用覆盖索引来进行查询操作，避免回表。</span><br><span class="line">&lt;br/&gt;说明:如果一本书需要知道第 11 章是什么标题，会翻开第 11 章对应的那一页吗?目录浏览 一下就好，这个目录就是起到覆盖索引的作用。</span><br><span class="line">&lt;br/&gt;正例:能够建立索引的种类分为主键索引、唯一索引、普通索引三种，而覆盖索引只是一种查询的一种效果，用explain的结果，extra列会出现:using index。</span><br><span class="line"></span><br><span class="line">7. 【推荐】利用延迟关联或者子查询优化超多分页场景。</span><br><span class="line">&lt;br/&gt;说明:MySQL 并不是跳过 offset 行，而是取 offset+N 行，然后返回放弃前 offset 行，返回 N 行，那当 offset 特别大的时候，效率就非常的低下，要么控制返回的总页数，要么对超过 特定阈值的页数进行 SQL 改写。</span><br><span class="line">&lt;br/&gt;正例:先快速定位需要获取的 id 段，然后再关联:</span><br><span class="line">```SELECT a.* FROM 表 1 a, (select id from 表 1 where 条件 LIMIT 100000,20 ) b where a.id=b.id</span><br></pre></td></tr></table></figure></p></li><li><p>【推荐】SQL 性能优化的目标:至少要达到 range 级别，要求是 ref 级别，如果可以是 consts 最好。<br><br>说明:</p><ol><li>consts 单表中最多只有一个匹配行(主键或者唯一索引)，在优化阶段即可读取到数据。</li><li>ref 指的是使用普通的索引(normal index)。</li><li>range 对索引进行范围检索。<br><br>反例:explain 表的结果，type=index，索引物理文件全扫描，速度非常慢，这个 index 级 别比较 range 还低，与全表扫描是小巫见大巫。</li></ol></li><li><p>【推荐】建组合索引的时候，区分度最高的在最左边。<br><br>正例:如果 where a=? and b=? ，如果 a 列的几乎接近于唯一值，那么只需要单建 idx_a 索引即可。<br><br>说明:存在非等号和等号混合时，在建索引时，请把等号条件的列前置。如:where c&gt;? and d=? 那么即使 c 的区分度更高，也必须把 d 放在索引的最前列，即索引 idx_d_c。</p></li><li><p>【推荐】防止因字段类型不同造成的隐式转换，导致索引失效。</p></li><li><p>【参考】创建索引时避免有如下极端误解:</p><ol><li>宁滥勿缺。认为一个查询就需要建一个索引。</li><li>宁缺勿滥。认为索引会消耗空间、严重拖慢更新和新增速度。</li><li>抵制惟一索引。认为业务的惟一性一律需要在应用层通过“先查后插”方式解决。</li></ol></li></ol><h2 id="三-SQL-语句"><a href="#三-SQL-语句" class="headerlink" title="(三) SQL 语句"></a>(三) SQL 语句</h2><ol><li><p>【强制】不要使用 count(列名)或 count(常量)来替代<figure class="highlight plain"><figcaption><span>SQL92 定义的 标准统计行数的语法，跟数据库无关，跟 NULL 和非 NULL 无关。 说明:```count(*)```会统计值为 NULL 的行，而 count(列名)不会统计此列为 NULL 值的行。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. 【强制】count(distinct col) 计算该列除 NULL 之外的不重复行数，注意 count(distinct col1, col2) 如果其中一列全为NULL，那么即使另一列有不同的值，也返回为0。</span><br><span class="line"></span><br><span class="line">3. 【强制】当某一列的值全是 NULL 时，count(col)的返回结果为 0，但 sum(col)的返回结果为 NULL，因此使用 sum()时需注意 NPE 问题。</span><br><span class="line">&lt;br/&gt;正例:可以使用如下方式来避免sum的NPE问题:```SELECT IF(ISNULL(SUM(g)),0,SUM(g)) FROM table;</span><br></pre></td></tr></table></figure></p></li><li><p>【强制】使用 ISNULL()来判断是否为 NULL 值。 说明:NULL 与任何值的直接比较都为 NULL。</p><ol><li>NULL&lt;&gt;NULL的返回结果是NULL，而不是false。</li><li>NULL=NULL的返回结果是NULL，而不是true。 3) NULL&lt;&gt;1的返回结果是NULL，而不是true。</li></ol></li><li><p>【强制】 在代码中写分页查询逻辑时，若 count 为 0 应直接返回，避免执行后面的分页语句。</p></li><li><p>【强制】不得使用外键与级联，一切外键概念必须在应用层解决。<br><br>说明:以学生和成绩的关系为例，学生表中的 student_id 是主键，那么成绩表中的 student_id 则为外键。如果更新学生表中的 student_id，同时触发成绩表中的 student_id 更新，即为 级联更新。外键与级联更新适用于单机低并发，不适合分布式、高并发集群;级联更新是强阻塞，存在数据库更新风暴的风险;外键影响数据库的插入速度。</p></li><li><p>【强制】禁止使用存储过程，存储过程难以调试和扩展，更没有移植性。</p></li><li><p>【强制】数据订正(特别是删除、修改记录操作)时，要先 select，避免出现误删除，确认<br>无误才能执行更新语句。</p></li><li><p>【推荐】in 操作能避免则避免，若实在避免不了，需要仔细评估 in 后边的集合元素数量，控 制在 1000 个之内。</p></li><li><p>【参考】如果有国际化需要，所有的字符存储与表示，均以 utf-8 编码，注意字符统计函数的区别。<br><br>说明:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT LENGTH(&quot;轻松工作&quot;); 返回为12</span><br><span class="line">SELECT CHARACTER_LENGTH(&quot;轻松工作&quot;); 返回为4</span><br><span class="line">如果需要存储表情，那么选择 utf8mb4 来进行存储，注意它与 utf-8 编码的区别。</span><br></pre></td></tr></table></figure></li><li><p>【参考】TRUNCATE TABLE 比 DELETE 速度快，且使用的系统和事务日志资源少，但 TRUNCATE 无事务且不触发 trigger，有可能造成事故，故不建议在开发代码中使用此语句。 <br>说明:TRUNCATE TABLE 在功能上与不带 WHERE 子句的 DELETE 语句相同。</p></li></ol><h2 id="四-ORM-映射"><a href="#四-ORM-映射" class="headerlink" title="(四) ORM 映射"></a>(四) ORM 映射</h2><ol><li>【强制】在表查询中，一律不要使用 * 作为查询的字段列表，需要哪些字段必须明确写明。 <br>说明:<ol><li>增加查询分析器解析成本。</li><li>增减字段容易与 resultMap 配置不一致。</li><li>无用字 段增加网络消耗，尤其是 text 类型的字段。</li></ol></li></ol><ol start="2"><li><p>【强制】POJO 类的布尔属性不能加 is，而数据库字段必须加 is_，要求在 resultMap 中进行 字段与属性之间的映射。<br><br>说明:参见定义 POJO 类以及数据库字段定义规定，在<resultmap>中增加映射，是必须的。 在MyBatis Generator生成的代码中，需要进行对应的修改。</resultmap></p></li><li><p>【强制】不要用 resultClass 当返回参数，即使所有类属性名与数据库字段一一对应，也需要定义;反过来，每一个表也必然有一个 POJO 类与之对应。<br><br>说明:配置映射关系，使字段与 DO 类解耦，方便维护。</p></li><li><p>【强制】sql.xml 配置参数使用:#{}，#param# 不要使用${} 此种方式容易出现 SQL 注入。</p></li><li><p>【强制】iBATIS自带的queryForList(String statementName,int start,int size)不推荐使用。<br><br>说明:其实现方式是在数据库取到 statementName 对应的 SQL 语句的所有记录，再通过 subList 取 start,size 的子集合。<br><br>正例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">map.put(&quot;start&quot;, start);</span><br><span class="line">map.put(&quot;size&quot;, size);</span><br></pre></td></tr></table></figure></li><li><p>【强制】不允许直接拿 HashMap 与 Hashtable 作为查询结果集的输出。<br><br>说明:resultClass=”Hashtable”，会置入字段名和属性值，但是值的类型不可控。</p></li><li><p>【强制】更新数据表记录时，必须同时更新记录对应的 gmt_modified 字段值为当前时间。</p></li><li><p>【推荐】不要写一个大而全的数据更新接口。传入为 POJO 类，不管是不是自己的目标更新字段，都进行 update table set c1=value1,c2=value2,c3=value3; 这是不对的。执行 SQL 时，不要更新无改动的字段，一是易出错;二是效率低;三是增加 binlog 存储。</p></li><li><p>【参考】@Transactional 事务不要滥用。事务会影响数据库的 QPS，另外使用事务的地方需要考虑各方面的回滚方案，包括缓存回滚、搜索引擎回滚、消息补偿、统计修正等。</p></li><li><p>【参考】<isequal>中的 compareValue 是与属性值对比的常量，一般是数字，表示相等时带 上此条件;<isnotempty>表示不为空且不为 null 时执行;<isnotnull>表示不为 null 值时 执行。</isnotnull></isnotempty></isequal></p></li></ol><h1 id="六、工程结构"><a href="#六、工程结构" class="headerlink" title="六、工程结构"></a>六、工程结构</h1><h2 id="一-应用分层"><a href="#一-应用分层" class="headerlink" title="(一) 应用分层"></a>(一) 应用分层</h2><ol><li>【推荐】图中默认上层依赖于下层，箭头关系表示可直接依赖，如:开放接口层可以依赖于<br>Web 层，也可以直接依赖于 Service 层，依此类推:<br><img src="http://qiniu.xuchen.link/1a792e0b8f97a9d86124580e70b2fb59.png" alt="应用分层"><ul><li>开放接口层:可直接封装 Service 方法暴露成 RPC 接口;通过 Web 封装成 http 接口;进行网关安全控制、流量控制等。</li><li>终端显示层:各个端的模板渲染并执行显示的层。当前主要是 velocity 渲染，JS 渲染， JSP 渲染，移动端展示等。</li><li>Web 层:主要是对访问控制进行转发，各类基本参数校验，或者不复用的业务简单处理等。</li><li>Service 层:相对具体的业务逻辑服务层。</li><li>Manager 层:通用业务处理层，它有如下特征:<ol><li>对第三方平台封装的层，预处理返回结果及转化异常信息;</li><li>对Service层通用能力的下沉，如缓存方案、中间件通用处理;</li><li>与DAO层交互，对多个DAO的组合复用。</li></ol></li><li>DAO 层:数据访问层，与底层 MySQL、Oracle、Hbase 等进行数据交互。</li><li>外部接口或第三方平台:包括其它部门RPC开放接口，基础平台，其它公司的HTTP接口。</li></ul></li></ol><ol start="2"><li><p>【参考】 (分层异常处理规约)在 DAO 层，产生的异常类型有很多，无法用细粒度的异常进 行catch，使用catch(Exception e)方式，并throw new DAOException(e)，不需要打印 日志，因为日志在 Manager/Service 层一定需要捕获并打印到日志文件中去，如果同台服务器再打日志，浪费性能和存储。在 Service 层出现异常时，必须记录出错日志到磁盘，尽可能带上参数信息，相当于保护案发现场。如果 Manager 层与 Service 同机部署，日志方式与 DAO 层处理一致，如果是单独部署，则采用与 Service 一致的处理方式。Web 层绝不应该继续往上 抛异常，因为已经处于顶层，如果意识到这个异常将导致页面无法正常渲染，那么就应该直接跳转到友好错误页面，加上用户容易理解的错误提示信息。开放接口层要将异常处理成错误码和错误信息方式返回。</p></li><li><p>【参考】分层领域模型规约:</p><ul><li>DO(Data Object):此对象与数据库表结构一一对应，通过 DAO 层向上传输数据源对象。</li><li>DTO(Data Transfer Object):数据传输对象，Service 或 Manager 向外传输的对象。</li><li>BO(Business Object):业务对象，由 Service 层输出的封装业务逻辑的对象。</li><li>AO(ApplicationObject):应用对象，在Web层与Service层之间抽象的复用对象模型， 极为贴近展示层，复用度不高。</li><li>VO(View Object):显示层对象，通常是 Web 向模板渲染引擎层传输的对象。</li><li>Query:数据查询对象，各层接收上层的查询请求。注意超过 2 个参数的查询封装，禁止使用 Map 类来传输。</li></ul></li></ol><h2 id="二-二方库依赖"><a href="#二-二方库依赖" class="headerlink" title="(二) 二方库依赖"></a>(二) 二方库依赖</h2><ol><li>【强制】定义 GAV 遵从以下规则:<ol><li>GroupID 格式:com.{公司/BU }.业务线 [.子业务线]，最多 4 级。<br><br>说明:{公司/BU} 例如:alibaba/taobao/tmall/aliexpress 等 BU 一级;子业务线可选。<br><br>正例:com.taobao.jstorm 或 com.alibaba.dubbo.register</li><li>ArtifactID格式:产品线名-模块名。语义不重复不遗漏，先到中央仓库去查证一下。<br><br>正例:dubbo-client / fastjson-api / jstorm-tool 3) Version:详细规定参考下方。</li></ol></li></ol><ol start="2"><li><p>【强制】二方库版本号命名方式:主版本号.次版本号.修订号</p><ol><li>主版本号:产品方向改变，或者大规模API不兼容，或者架构不兼容升级。</li><li>次版本号:保持相对兼容性，增加主要功能特性，影响范围极小的API不兼容修改。</li><li>修订号:保持完全兼容性，修复BUG、新增次要功能特性等。<br><br>说明:注意起始版本号必须为:1.0.0，而不是 0.0.1 正式发布的类库必须先去中央仓库进 行查证，使版本号有延续性，正式版本号不允许覆盖升级。如当前版本:1.3.3，那么下一个 合理的版本号:1.3.4 或 1.4.0 或 2.0.0</li></ol></li><li><p>【强制】线上应用不要依赖 SNAPSHOT 版本(安全包除外)。<br><br>说明:不依赖 SNAPSHOT 版本是保证应用发布的幂等性。另外，也可以加快编译时的打包构建。</p></li><li><p>【强制】二方库的新增或升级，保持除功能点之外的其它 jar 包仲裁结果不变。如果有改变， 必须明确评估和验证，建议进行 dependency:resolve 前后信息比对，如果仲裁结果完全不一致，那么通过 dependency:tree 命令，找出差异点，进行<excludes>排除 jar 包。</excludes></p></li><li><p>【强制】二方库里可以定义枚举类型，参数可以使用枚举类型，但是接口返回值不允许使用枚举类型或者包含枚举类型的 POJO 对象。</p></li><li><p>【强制】依赖于一个二方库群时，必须定义一个统一的版本变量，避免版本号不一致。<br><br>说明:依赖 springframework-core,-context,-beans，它们都是同一个版本，可以定义一 个变量来保存版本:${spring.version}，定义依赖的时候，引用该版本。</p></li><li><p>【强制】禁止在子项目的 pom 依赖中出现相同的 GroupId，相同的 ArtifactId，但是不同的 Version。<br><br>说明:在本地调试时会使用各子项目指定的版本号，但是合并成一个 war，只能有一个版本号 出现在最后的 lib 目录中。可能出现线下调试是正确的，发布到线上却出故障的问题。</p></li><li><p>【推荐】所有 pom 文件中的依赖声明放在<dependencies>语句块中，所有版本仲裁放在 <dependencymanagement>语句块中。<br><br>说明:<dependencymanagement>里只是声明版本，并不实现引入，因此子项目需要显式的声明依赖，version 和 scope 都读取自父 pom。而<dependencies>所有声明在主 pom 的 <dependencies>里的依赖都会自动引入，并默认被所有的子项目继承。</dependencies></dependencies></dependencymanagement></dependencymanagement></dependencies></p></li><li><p>【推荐】二方库不要有配置项，最低限度不要再增加配置项。</p></li><li><p>【参考】为避免应用二方库的依赖冲突问题，二方库发布者应当遵循以下原则:</p><ol><li>精简可控原则。移除一切不必要的 API 和依赖，只包含 Service API、必要的领域模型对 象、Utils 类、常量、枚举等。如果依赖其它二方库，尽量是 provided 引入，让二方库使用 者去依赖具体版本号;无 log 具体实现，只依赖日志框架。  </li><li>稳定可追溯原则。每个版本的变化应该被记录，二方库由谁维护，源码在哪里，都需要能 方便查到。除非用户主动升级版本，否则公共二方库的行为不应该发生变化。</li></ol></li></ol><h2 id="三-服务器"><a href="#三-服务器" class="headerlink" title="(三) 服务器"></a>(三) 服务器</h2><ol><li><p>【推荐】高并发服务器建议调小 TCP 协议的 time_wait 超时时间。<br><br>说明:操作系统默认 240 秒后，才会关闭处于 time_wait 状态的连接，在高并发访问下，服务器端会因为处于 time_wait 的连接数太多，可能无法建立新的连接，所以需要在服务器上调小此等待值。<br><br>正例:在 linux 服务器上请通过变更/etc/sysctl.conf 文件去修改该缺省值(秒):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure></li><li><p>【推荐】调大服务器所支持的最大文件句柄数(File Descriptor，简写为fd)。<br><br>说明:主流操作系统的设计是将 TCP/UDP 连接采用与文件一样的方式去管理，即一个连接对 应于一个 fd。主流的 linux 服务器默认所支持最大 fd 数量为 1024，当并发连接数很大时很容易因为 fd 不足而出现“open too many files”错误，导致新的连接无法建立。 建议将 linux服务器所支持的最大句柄数调高数倍(与服务器的内存数量相关)。</p></li><li><p>【推荐】给 JVM 环境参数设置-XX:+HeapDumpOnOutOfMemoryError 参数，让 JVM 碰到 OOM 场景时输出 dump 信息。<br><br>说明:OOM 的发生是有概率的，甚至相隔数月才出现一例，出错时的堆内信息对解决问题非常 有帮助。</p></li><li><p>【推荐】在线上生产环境，JVM的Xms和Xmx设置一样大小的内存容量，避免在GC 后调整堆 大小带来的压力。</p></li><li><p>【参考】服务器内部重定向使用 forward;外部重定向地址使用 URL 拼装工具类来生成，否则 会带来 URL 维护不一致的问题和潜在的安全风险。</p></li></ol><h2 id="七、设计规约"><a href="#七、设计规约" class="headerlink" title="七、设计规约"></a>七、设计规约</h2><ol><li><p>【强制】存储方案和底层数据结构的设计获得评审一致通过，并沉淀成为文档。 <br>说明:有缺陷的底层数据结构容易导致系统风险上升，可扩展性下降，重构成本也会因历史数据迁移和系统平滑过渡而陡然增加，所以，存储方案和数据结构需要认真地进行设计和评审，生产环境提交执行后，需要进行 double check。<br><br>正例:评审内容包括存储介质选型、表结构设计能否满足技术方案、存取性能和存储空间能否 满足业务发展、表或字段之间的辩证关系、字段名称、字段类型、索引等;数据结构变更(如 在原有表中新增字段)也需要进行评审通过后上线。</p></li><li><p>【强制】在需求分析阶段，如果与系统交互的 User 超过一类并且相关的 User Case 超过 5 个， 使用用例图来表达更加清晰的结构化需求。</p></li><li><p>【强制】如果某个业务对象的状态超过 3 个，使用状态图来表达并且明确状态变化的各个触发条件。<br><br>说明:状态图的核心是对象状态，首先明确对象有多少种状态，然后明确两两状态之间是否存在直接转换关系，再明确触发状态转换的条件是什么。<br><br>正例:淘宝订单状态有已下单、待付款、已付款、待发货、已发货、已收货等。比如已下单与已收货这两种状态之间是不可能有直接转换关系的。</p></li><li><p>【强制】如果系统中某个功能的调用链路上的涉及对象超过 3个，使用时序图来表达并且明确各调用环节的输入与输出。<br><br>说明:时序图反映了一系列对象间的交互与协作关系，清晰立体地反映系统的调用纵深链路。</p></li><li><p>【强制】如果系统中模型类超过 5 个，并且存在复杂的依赖关系，使用类图来表达并且明确类之间的关系。<br><br>说明:类图像建筑领域的施工图，如果搭平房，可能不需要，但如果建造蚂蚁 Z 空间大楼，肯定需要详细的施工图。</p></li><li><p>【强制】如果系统中超过 2 个对象之间存在协作关系，并且需要表示复杂的处理流程，使用活动图来表示。<br><br>说明:活动图是流程图的扩展，增加了能够体现协作关系的对象泳道，支持表示并发等。</p></li><li><p>【推荐】需求分析与系统设计在考虑主干功能的同时，需要充分评估异常流程与业务边界。<br><br>反例:用户在淘宝付款过程中，银行扣款成功，发送给用户扣款成功短信，但是支付宝入款时由于断网演练产生异常，淘宝订单页面依然显示未付款，导致用户投诉。</p></li><li><p>【推荐】类在设计与实现时要符合单一原则。<br><br>说明:单一原则最易理解却是最难实现的一条规则，随着系统演进，很多时候，忘记了类设计的初衷。</p></li><li><p>【推荐】谨慎使用继承的方式来进行扩展，优先使用聚合/组合的方式来实现。<br><br>说明:不得已使用继承的话，必须符合里氏代换原则，此原则说父类能够出现的地方子类一定 能够出现，比如，“把钱交出来”，钱的子类美元、欧元、人民币等都可以出现。</p></li><li><p>【推荐】系统设计时，根据依赖倒置原则，尽量依赖抽象类与接口，有利于扩展与维护。<br><br>说明:低层次模块依赖于高层次模块的抽象，方便系统间的解耦。</p></li><li><p>【推荐】系统设计时，注意对扩展开放，对修改闭合。<br><br>说明:极端情况下，交付的代码都是不可修改的，同一业务域内的需求变化，通过模块或类的 扩展来实现。</p></li><li><p>【推荐】系统设计阶段，共性业务或公共行为抽取出来公共模块、公共配置、公共类、公共方 法等，避免出现重复代码或重复配置的情况。<br><br>说明:随着代码的重复次数不断增加，维护成本指数级上升。</p></li><li><p>【推荐】避免如下误解:敏捷开发 = 讲故事 + 编码 + 发布。<br><br>说明:敏捷开发是快速交付迭代可用的系统，省略多余的设计方案，摒弃传统的审批流程，但核心关键点上的必要设计和文档沉淀是需要的。<br><br>反例:某团队为了业务快速发展，敏捷成了产品经理催进度的借口，系统中均是勉强能运行但像面条一样的代码，可维护性和可扩展性极差，一年之后，不得不进行大规模重构，得不偿失。</p></li><li><p>【参考】系统设计主要目的是明确需求、理顺逻辑、后期维护，次要目的用于指导编码。<br><br>说明:避免为了设计而设计，系统设计文档有助于后期的系统维护，所以设计结果需要进行分类归档保存。</p></li><li><p>【参考】设计的本质就是识别和表达系统难点，找到系统的变化点，并隔离变化点。<br><br>说明:世间众多设计模式目的是相同的，即隔离系统变化点。</p></li><li><p>【参考】系统架构设计的目的:</p><ol><li>确定系统边界。确定系统在技术层面上的做与不做。</li><li>确定系统内模块之间的关系。确定模块之间的依赖关系及模块的宏观输入与输出。</li><li>确定指导后续设计与演化的原则。使后续的子系统或模块设计在规定的框架内继续演化。</li><li>确定非功能性需求。非功能性需求是指安全性、可用性、可扩展性等。</li></ol></li></ol><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="专有名次解释"><a href="#专有名次解释" class="headerlink" title="专有名次解释"></a>专有名次解释</h2><ol><li><p>POJO(Plain Ordinary Java Object): 在本手册中，POJO 专指只有 setter / getter / toString的简单类，包括DO/DTO/BO/VO等。</p></li><li><p>GAV(GroupId、ArtifactctId、Version): Maven坐标，是用来唯一标识jar包。</p></li><li><p>OOP(Object Oriented Programming): 本手册泛指类、对象的编程处理方式。</p></li><li><p>ORM(Object Relation Mapping): 对象关系映射，对象领域模型与底层数据之间的转换， 本文泛指iBATIS, mybatis等框架。</p></li><li><p>NPE(java.lang.NullPointerException): 空指针异常。</p></li><li><p>SOA(Service-Oriented Architecture): 面向服务架构，它可以根据需求通过网络对松散耦合的粗粒度应用组件进行分布式部署、组合和使用，有利于提升组件可重用性，可维护性。</p></li><li><p>IDE(Integrated Development Environment): 用于提供程序开发环境的应用程序，一般 包括代码编辑器、编译器、调试器和图形用户界面等工具，本《手册》泛指 IntelliJ IDEA 和 eclipse。</p></li><li><p>OOM(Out Of Memory): 源于 java.lang.OutOfMemoryError，当 JVM 没有足够的内存 来为对象分配空间并且垃圾回收器也无法回收空间时，系统出现的严重状况。</p></li><li><p>一方库: 本工程内部子项目模块依赖的库(jar 包)。</p></li><li><p>二方库: 公司内部发布到中央仓库，可供公司内部其它应用依赖的库(jar包)。</p></li><li><p>三方库: 公司之外的开源库(jar 包)。</p></li></ol><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>来源：阿里爸爸Java开发手册 1.4.0<br>发布日期：2018.5.20</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一-编程规约&quot;&gt;&lt;a href=&quot;#一-编程规约&quot; class=&quot;headerlink&quot; title=&quot;一.编程规约&quot;&gt;&lt;/a&gt;一.编程规约&lt;/h1&gt;&lt;h2 id=&quot;（一）命名风格&quot;&gt;&lt;a href=&quot;#（一）命名风格&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="java" scheme="http://ludan03.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>自动化部署解决方案</title>
    <link href="http://ludan03.github.io/2019/01/09/deployment.html"/>
    <id>http://ludan03.github.io/2019/01/09/deployment.html</id>
    <published>2019-01-09T15:43:41.000Z</published>
    <updated>2019-01-19T15:11:46.141Z</updated>
    
    <content type="html"><![CDATA[<h1 id="导语：我们为什么需要自动化部署"><a href="#导语：我们为什么需要自动化部署" class="headerlink" title="导语：我们为什么需要自动化部署"></a>导语：我们为什么需要自动化部署</h1><p>　　随着java系统架构由单体应用向分布式发展，本地单服务器向云端多服务器发展。java环境产生的代码需要向越来越多的服务器进行部署。</p><p>　　敏捷开发的流行，让客户或领导急于看到最新的开发进展，需要我们频繁的更新多台服务器的代码。<br>繁琐且重复的部署命令，不同服务器之间的环境差距，往往容易产生无法预知的问题。</p><p>　　在公司又不愿意花钱招运维的情况下，苦逼的java后端程序员急需要使用一种提高部署效率的解决方案。</p><p>　　Docker+DockerCompose+Docker-register+GitLab的方式就进入了我们的视野。</p><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="Docker是什么"><a href="#Docker是什么" class="headerlink" title="Docker是什么"></a>Docker是什么</h2><p>　　Docker是一个开源的应用容器引擎。开发者可以将自己的应用打包在可移植的容器中，然后发布到任何Linux上都可以运行。真正的实现了一次构建到处运行。</p><p>　　Docker是一种虚拟化技术，由于直接运行在宿主机内核上，且不会虚拟任何硬件。因此资源耗费低，开启速度快，可以达到秒级启动。由于资源耗费低，在一台宿主机上甚至可以启动上千容器。此外，各个容器直接是相互隔离的，安全且高可用，一个容器出问题不会导致整个宿主机出问题。</p><h2 id="Docker架构"><a href="#Docker架构" class="headerlink" title="Docker架构"></a>Docker架构</h2><p>　　Docker是C/S架构，通过Api管理容器。</p><p>　　Docker的容器通过镜像来创建，镜像类似于一套模板。容器可以根据一个镜像创建多个容器，每一个容器之间互相隔离。镜像中的数据会影响容器创建时的数据，容器产生的数据变化不会影响镜像。</p><h2 id="Docker文件系统"><a href="#Docker文件系统" class="headerlink" title="Docker文件系统"></a>Docker文件系统</h2><p>　　Docker使用分层文件架构。一个镜像不是一个文件，而是一组文件的集合。在多个镜像之间有相互公用的底层文件时，能大大降低存储空间。因此在创建镜像的时候，每一层尽量只添加需要添加的东西，提供文件的复用率。</p><h2 id="Docker镜像仓库"><a href="#Docker镜像仓库" class="headerlink" title="Docker镜像仓库"></a>Docker镜像仓库</h2><p>　    Docker镜像存在镜像仓库中，Docker官方为我们提供了官方镜像库<a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker Hub</a>，我们也可以搭建自己的私有仓库。</p><h2 id="安装Dokcer"><a href="#安装Dokcer" class="headerlink" title="安装Dokcer"></a>安装Dokcer</h2><p>   Docker分为CE社区版与EE企业版。普通人家只要装Docker CE就足够满足日常需求。</p><h3 id="CentOS安装"><a href="#CentOS安装" class="headerlink" title="CentOS安装"></a>CentOS安装</h3><blockquote><p>⚠️：Docer在CentOS上运行需要系统为64位，且内核版本在3.10以上。</p></blockquote><p>官方教程可参考<a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">https://docs.docker.com/install/linux/docker-ce/centos/</a></p><p>中文版本可参考<a href="http://www.runoob.com/docker/centos-docker-install.html" target="_blank" rel="noopener">http://www.runoob.com/docker/centos-docker-install.html</a></p><h4 id="查看系统的内核版本"><a href="#查看系统的内核版本" class="headerlink" title="查看系统的内核版本"></a>查看系统的内核版本</h4>   <figure class="highlight plain"><figcaption><span>/]# uname -r```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;img src=&quot;http://qiniu.xuchen.link/8fad2a093a88bcdb8fb39b2ac2b89517.png&quot; width = &quot;200&quot; height = &quot;80&quot; alt=&quot;3.10以上内核版本&quot; /&gt;</span><br><span class="line"></span><br><span class="line">####  删除旧版本</span><br></pre></td></tr></table></figure><p>$ sudo yum remove docker \<br>                  docker-client \<br>                  docker-client-latest \<br>                  docker-common \<br>                  docker-latest \<br>                  docker-latest-logrotate \<br>                  docker-logrotate \<br>                  docker-selinux \<br>                  docker-engine-selinux \<br>                  docker-engine<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">####  安装必要系统工具</span><br></pre></td></tr></table></figure></p><p>sudo yum install -y yum-utils device-mapper-persistent-data lvm2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">####  添加软件源信息</span><br></pre></td></tr></table></figure></p><p>sudo yum-config-manager –add-repo <a href="http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo" target="_blank" rel="noopener">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">####  更新 yum 缓存</span><br></pre></td></tr></table></figure></p><p>sudo yum makecache fast<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">####  安装 Docker-ce</span><br></pre></td></tr></table></figure></p><p>sudo yum -y install docker-ce<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">####   启动docker后台进程</span><br></pre></td></tr></table></figure></p><p>sudo systemctl start docker<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">####  测试docker，运行hello-word</span><br></pre></td></tr></table></figure></p><p>docker run hello-world<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">###  脚本安装docker</span><br><span class="line">#### 确保 yum 包更新到最新</span><br><span class="line">```sudo yum update</span><br></pre></td></tr></table></figure></p><h4 id="执行-Docker-安装脚本"><a href="#执行-Docker-安装脚本" class="headerlink" title="执行 Docker 安装脚本"></a>执行 Docker 安装脚本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line">sudo sh get-docker.sh</span><br></pre></td></tr></table></figure><h4 id="启动容器进程"><a href="#启动容器进程" class="headerlink" title="启动容器进程"></a>启动容器进程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><h4 id="验证镜像"><a href="#验证镜像" class="headerlink" title="验证镜像"></a>验证镜像</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure><h3 id="Ubuntu安装Docker"><a href="#Ubuntu安装Docker" class="headerlink" title="Ubuntu安装Docker"></a>Ubuntu安装Docker</h3><h4 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure><h4 id="apt安装"><a href="#apt安装" class="headerlink" title="apt安装"></a>apt安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure><h4 id="安装-GPG-证书"><a href="#安装-GPG-证书" class="headerlink" title="安装 GPG 证书"></a>安装 GPG 证书</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><h4 id="写入软件信息"><a href="#写入软件信息" class="headerlink" title="写入软件信息"></a>写入软件信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository &quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;</span><br></pre></td></tr></table></figure><h4 id="更新并安装-Docker-CE"><a href="#更新并安装-Docker-CE" class="headerlink" title="更新并安装 Docker CE"></a>更新并安装 Docker CE</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get -y update</span><br><span class="line">sudo apt-get -y install docker-ce</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><h3 id="镜像加速"><a href="#镜像加速" class="headerlink" title="镜像加速"></a>镜像加速</h3><h4 id="Ubuntu-16-04-、Debian-8-、CentOS-7"><a href="#Ubuntu-16-04-、Debian-8-、CentOS-7" class="headerlink" title="Ubuntu 16.04+、Debian 8+、CentOS 7"></a>Ubuntu 16.04+、Debian 8+、CentOS 7</h4><blockquote><p>⚠️ 针对systemd系统使用如下方法</p></blockquote><p>在<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [</span><br><span class="line">    &quot;https://registry.docker-cn.com&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="检查加速器是否生效"><a href="#检查加速器是否生效" class="headerlink" title="检查加速器是否生效"></a>检查加速器是否生效</h4><p>在命令行执行<figure class="highlight docker"><figcaption><span>info```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果在命令回显的消息中出现如下信息,则表示成功</span><br></pre></td></tr></table></figure></p><p>Registry Mirrors:<br> <a href="https://registry.docker-cn.com/" target="_blank" rel="noopener">https://registry.docker-cn.com/</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">###  删除docker-ce</span><br></pre></td></tr></table></figure></p><p>sudo yum remove docker-ce<br>sudo rm -rf /var/lib/docker<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">##  Docker镜像</span><br><span class="line">Docker的容器启动需要依赖镜像。在运行容器的时候如果本地没有镜像则自动会去docker镜像仓库中下载。</span><br><span class="line"></span><br><span class="line">### 拉取镜像</span><br><span class="line">可以通过```docker pull```命令主动获取镜像。命令格式为</span><br></pre></td></tr></table></figure></p><p>docker pull [OPTIONS] NAME[:TAG|@DIGEST]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OPTIONS是选项。</span><br></pre></td></tr></table></figure></p><p> -a, –all-tags               下载所有标记的镜像</p><p>  –disable-content-trust   跳过验证（默认为true）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">NAME是镜像名，一般由```域名/IP[:端口]仓库名```构成，官方镜像默认只有仓库名</span><br><span class="line">TAG是标签，一般为版本号。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 展示镜像</span><br><span class="line">可以使用```docker image ls```命令展示所有镜像。展示的列表：</span><br></pre></td></tr></table></figure></p><p>$ docker images fedora</p><p>REPOSITORY   TAG         IMAGE ID        CREATED      SIZE<br>fedora       rawhide     ad57ef8d78d7    5 days ago   359.3 MB<br>fedora       20          105182bb5e8b    5 days ago   372.7 MB<br>fedora       heisenbug   105182bb5e8b    5 days ago   372.7 MB<br>fedora       latest      105182bb5e8b    5 days ago   372.7 MB</p><p><none>       <none>      105182bb5e8a    6 days ago   372.7 MB<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">列表包含了仓库名（REPOSITORY）、标签（TAG）、镜像唯一id（IMAGE ID）、最近创建日期（CREATED）、大小（SIZE）</span><br><span class="line"></span><br><span class="line">### 虚悬镜像</span><br><span class="line">上列表中仓库名与标签都为none的为虚悬镜像。仓库名与标签对应一个唯一的镜像，但是这个镜像可以更换。当同一个镜像名+标签所指向的镜像更换后，旧的镜像就失去指引，变成虚悬镜像，类似于java中的对象失去了引用。可以通过```docker image prune```命令删除.</span><br><span class="line"></span><br><span class="line">### 删除镜像</span><br><span class="line">```docker image rm [选项] &lt;镜像1&gt; [&lt;镜像2&gt; ...]</span><br></pre></td></tr></table></figure></none></none></p><p>其中，镜像既可以是镜像名，短id，长id或是摘要</p><h4 id="强制删除镜像"><a href="#强制删除镜像" class="headerlink" title="强制删除镜像"></a>强制删除镜像</h4><figure class="highlight docker"><figcaption><span>rmi [选项] <镜像1> [<镜像2> ...]```</镜像2></镜像1></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">##  使用Dockerfile定制镜像</span></span><br><span class="line">（待更新）</span><br><span class="line"></span><br><span class="line"><span class="comment"># Docker容器</span></span><br><span class="line"><span class="comment">##  启动容器</span></span><br><span class="line"><span class="comment">### 新建容器并启动</span></span><br><span class="line">``` docker <span class="keyword">run</span> [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br></pre></td></tr></table></figure><p>(OPTIONS太多，不赘述)主要使用的最多的就是直接<figure class="highlight docker"><figcaption><span>run 镜像名```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">常用参数：</span><br></pre></td></tr></table></figure></p><p>-i Keep STDIN open even if not attached（在没有连接的情况下持续打开标准输入）<br>-t Allocate a pseudo-TTY（分配一个伪终端）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 启动已中止容器</span><br><span class="line">```docker container start [OPTIONS] 容器名1 [容器2...]</span><br></pre></td></tr></table></figure></p><h3 id="守护态运行"><a href="#守护态运行" class="headerlink" title="守护态运行"></a>守护态运行</h3><p>在启动的时候，加上参数 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">可以通过```docker container logs 容器名或id```查看容器相关日志</span><br><span class="line"></span><br><span class="line">##  终止容器</span><br><span class="line">```docker container stop [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure></p><p>参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-t 关闭前等待时间，默认10s</span><br></pre></td></tr></table></figure></p><h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><p>进入容器有两个命令：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```attach```不推荐使用，因为在退出容器的时候会停止容器。</span><br><span class="line"></span><br><span class="line">```exec```常搭配-it使用，以交互的方式进入容器。</span><br><span class="line"></span><br><span class="line">常见用法</span><br><span class="line"></span><br><span class="line">```docker exec -it 容器名 /bin/bash```,使用后，就如普通的终端一样。</span><br><span class="line"></span><br><span class="line"># Docker仓库</span><br><span class="line">Docker仓库是存放docker镜像的中心，支持官方仓库与自建私有仓库。</span><br><span class="line">##  [Docker Hub](https://hub.docker.com/)</span><br><span class="line">可以通过```docker search```命令来查找官方仓库中的镜像，并利用```docker pull```命令来将它下载到本地。</span><br><span class="line"></span><br><span class="line">##  [docker-registry](https://docs.docker.com/registry/)</span><br><span class="line">官方提供用于构建私有仓库的工具。</span><br><span class="line"></span><br><span class="line">官方文档：https://docs.docker.com/registry/</span><br><span class="line"></span><br><span class="line">### 下载registry</span><br><span class="line">获取官方registry镜像并运行</span><br></pre></td></tr></table></figure></p><p>docker run -d -p 5000:5000 –restart=always –name registry registry<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 在配置文件中添加私有仓库地址</span><br><span class="line">对于```systemd```系统，打开之前设置的```/etc/docker/daemon.json```,添加一条镜像地址。</span><br></pre></td></tr></table></figure></p><p>{<br>  “registry-mirrors”: [<br>    “<a href="https://registry.docker-cn.com&quot;" target="_blank" rel="noopener">https://registry.docker-cn.com&quot;</a><br>  ],<br>  “insecure-registries”: [<br>    “127.0.0.0:5000”<br>  ]<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">### 使用流程</span><br><span class="line"></span><br><span class="line">####  从官方下载镜像</span><br><span class="line"></span><br><span class="line">```docker pull ubuntu</span><br></pre></td></tr></table></figure></p><h4 id="为私有镜像标记特有的名称"><a href="#为私有镜像标记特有的名称" class="headerlink" title="为私有镜像标记特有的名称"></a>为私有镜像标记特有的名称</h4><figure class="highlight docker"><figcaption><span>image tag ubuntu localhost:5000/myfirstimage```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">####  上传到私有镜像</span></span><br><span class="line"></span><br><span class="line">```docker push localhost:<span class="number">5000</span>/myfirstimage</span><br></pre></td></tr></table></figure><h4 id="从私有仓库下载刚上传的镜像"><a href="#从私有仓库下载刚上传的镜像" class="headerlink" title="从私有仓库下载刚上传的镜像"></a>从私有仓库下载刚上传的镜像</h4><p><code>docker pull localhost:5000/myfirstimage</code></p><h1 id="DockerCompose"><a href="#DockerCompose" class="headerlink" title="DockerCompose"></a>DockerCompose</h1><h2 id="DockerCompose是什么"><a href="#DockerCompose是什么" class="headerlink" title="DockerCompose是什么"></a>DockerCompose是什么</h2><p>Docker很方便的为我们进行了应用的部署，但是当大量的容器需要进行管理时，重复的Docker指令也令我们头疼。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;导语：我们为什么需要自动化部署&quot;&gt;&lt;a href=&quot;#导语：我们为什么需要自动化部署&quot; class=&quot;headerlink&quot; title=&quot;导语：我们为什么需要自动化部署&quot;&gt;&lt;/a&gt;导语：我们为什么需要自动化部署&lt;/h1&gt;&lt;p&gt;　　随着java系统架构由单体应用向
      
    
    </summary>
    
    
      <category term="运维" scheme="http://ludan03.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>书摘</title>
    <link href="http://ludan03.github.io/2018/11/09/bookpick.html"/>
    <id>http://ludan03.github.io/2018/11/09/bookpick.html</id>
    <published>2018-11-09T09:43:41.000Z</published>
    <updated>2018-11-23T05:48:15.437Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://phxm9byf0.bkt.clouddn.com/%E5%B8%B8%E8%AF%86-%E6%A2%81%E6%96%87%E9%81%93.jpg" alt=""></p><p>2018-11-09</p><hr><blockquote><p>【常识】[上篇 理解当代中国的七十张关键切片]梁文道</p><p>当代中国庞杂繁复，有说不完的故事，谈不尽的现象。这里的文章就像人体切片，断流截出其中关键的部分，虽然犹如管中窥豹，亦可检视全体经络的气脉动向。                    </p></blockquote><p>2018-11-23</p><hr><p>王朔在书中如是说</p><blockquote><p>【致女儿书】 王朔<br>崩溃就是想起了以前的历次崩溃</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://phxm9byf0.bkt.clouddn.com/%E5%B8%B8%E8%AF%86-%E6%A2%81%E6%96%87%E9%81%93.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;2018-11-09&lt;/p&gt;
&lt;hr&gt;
&lt;blockq
      
    
    </summary>
    
    
      <category term="读书" scheme="http://ludan03.github.io/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>戒 定 慧</title>
    <link href="http://ludan03.github.io/2018/10/16/discipline,%20meditation,%20wisdom.html"/>
    <id>http://ludan03.github.io/2018/10/16/discipline, meditation, wisdom.html</id>
    <published>2018-10-16T15:04:13.000Z</published>
    <updated>2018-11-09T15:15:31.868Z</updated>
    
    <content type="html"><![CDATA[<center><font size="6"> 戒</font></center><br><center>完善道德品质</center><br><center><font size="6"> 定</font></center><br><center>致力于内心平静</center><br><center><font size="6"> 慧</font></center><br><center>培养智慧</center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;center&gt;&lt;font size=&quot;6&quot;&gt; 戒&lt;/font&gt;&lt;/center&gt;&lt;br&gt;&lt;center&gt;完善道德品质&lt;/center&gt;&lt;br&gt;&lt;center&gt;&lt;font size=&quot;6&quot;&gt; 定&lt;/font&gt;&lt;/center&gt;&lt;br&gt;&lt;center&gt;致力于内心平静&lt;/center
      
    
    </summary>
    
    
      <category term="佛" scheme="http://ludan03.github.io/tags/%E4%BD%9B/"/>
    
      <category term="国学" scheme="http://ludan03.github.io/tags/%E5%9B%BD%E5%AD%A6/"/>
    
  </entry>
  
</feed>
